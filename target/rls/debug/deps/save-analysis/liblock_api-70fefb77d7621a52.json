{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0","program":"/home/zyphen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--edition=2018","--crate-name","lock_api","/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=70fefb77d7621a52","-C","extra-filename=-70fefb77d7621a52","--out-dir","/home/zyphen/Projects/rustlings/rustlings/target/rls/debug/deps","-L","dependency=/home/zyphen/Projects/rustlings/rustlings/target/rls/debug/deps","--extern","scopeguard=/home/zyphen/Projects/rustlings/rustlings/target/rls/debug/deps/libscopeguard-067de2ae248bd874.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/zyphen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/zyphen/Projects/rustlings/rustlings/target/rls/debug/deps/liblock_api-70fefb77d7621a52.rmeta"},"prelude":{"crate_id":{"name":"lock_api","disambiguator":[18267487447716816332,3399322068019647116]},"crate_root":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src","external_crates":[{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[9113878364975505769,4626460723841361367]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[10636203250160794641,6979396832464280682]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[7259142600435629501,12221323364939802703]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","num":4,"id":{"name":"scopeguard","disambiguator":[10658423740323185223,10836798155234982921]}}],"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":333,"byte_end":3953,"line_start":8,"line_end":107,"column_start":1,"column_end":26}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":3827,"byte_end":3828,"line_start":98,"line_end":98,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":3827,"byte_end":3828,"line_start":98,"line_end":98,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":3827,"byte_end":3828,"line_start":98,"line_end":98,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":333,"byte_end":3953,"line_start":8,"line_end":107,"column_start":1,"column_end":26},"name":"","qualname":"::","value":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":862}],"decl_id":null,"docs":" This library provides type-safe and fully-featured `Mutex` and `RwLock`\n types which wrap a simple raw mutex or rwlock type. This has several\n benefits: not only does it eliminate a large portion of the work in\n implementing custom lock types, it also allows users to write code which is\n generic with regards to different lock implementations.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":3471,"byte_end":3481,"line_start":86,"line_end":86,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":3482,"byte_end":3504,"line_start":87,"line_end":87,"column_start":1,"column_end":23}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":3505,"byte_end":3531,"line_start":88,"line_end":88,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":14},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":3710,"byte_end":3719,"line_start":95,"line_end":95,"column_start":12,"column_end":21},"name":"GuardSend","qualname":"::GuardSend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type which indicates that the Guard type for a lock is `Send`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":17},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/lib.rs","byte_start":3815,"byte_end":3826,"line_start":98,"line_end":98,"column_start":12,"column_end":23},"name":"GuardNoSend","qualname":"::GuardNoSend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type which indicates that the Guard type for a lock is not `Send`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":28},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":4899,"byte_end":4907,"line_start":29,"line_end":29,"column_start":18,"column_end":26},"name":"RawMutex","qualname":"::mutex::RawMutex","value":"RawMutex","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33}],"decl_id":null,"docs":" Basic operations for a mutex.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":29},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":4965,"byte_end":4969,"line_start":31,"line_end":31,"column_start":11,"column_end":15},"name":"INIT","qualname":"::mutex::RawMutex::INIT","value":"Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Initial value for an unlocked mutex.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":30},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":5134,"byte_end":5145,"line_start":35,"line_end":35,"column_start":10,"column_end":21},"name":"GuardMarker","qualname":"::mutex::RawMutex::GuardMarker","value":"type GuardMarker;","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Marker type which determines whether a lock guard should be `Send`. Use\n one of the `GuardSend` or `GuardNoSend` helper types here.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":5239,"byte_end":5243,"line_start":38,"line_end":38,"column_start":8,"column_end":12},"name":"lock","qualname":"::mutex::RawMutex::lock","value":"fn (&self) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Acquires this mutex, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":5317,"byte_end":5325,"line_start":41,"line_end":41,"column_start":8,"column_end":16},"name":"try_lock","qualname":"::mutex::RawMutex::try_lock","value":"fn (&self) -> bool","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Attempts to acquire this mutex without blocking.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":5378,"byte_end":5384,"line_start":44,"line_end":44,"column_start":8,"column_end":14},"name":"unlock","qualname":"::mutex::RawMutex::unlock","value":"fn (&self) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Unlocks this mutex.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":34},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":5776,"byte_end":5788,"line_start":53,"line_end":53,"column_start":18,"column_end":30},"name":"RawMutexFair","qualname":"::mutex::RawMutexFair","value":"RawMutexFair: RawMutex","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":36}],"decl_id":null,"docs":" Additional methods for mutexes which support fair unlocking.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":5865,"byte_end":5876,"line_start":55,"line_end":55,"column_start":8,"column_end":19},"name":"unlock_fair","qualname":"::mutex::RawMutexFair::unlock_fair","value":"fn (&self) -> ()","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Unlocks this mutex using a fair unlock protocol.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":6169,"byte_end":6173,"line_start":62,"line_end":62,"column_start":8,"column_end":12},"name":"bump","qualname":"::mutex::RawMutexFair::bump","value":"fn (&self) -> ()","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":37},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":6471,"byte_end":6484,"line_start":72,"line_end":72,"column_start":18,"column_end":31},"name":"RawMutexTimed","qualname":"::mutex::RawMutexTimed","value":"RawMutexTimed: RawMutex","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41}],"decl_id":null,"docs":" Additional methods for mutexes which support locking with timeouts.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":38},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":6553,"byte_end":6561,"line_start":74,"line_end":74,"column_start":10,"column_end":18},"name":"Duration","qualname":"::mutex::RawMutexTimed::Duration","value":"type Duration;","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Duration type used for `try_lock_for`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":39},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":6621,"byte_end":6628,"line_start":77,"line_end":77,"column_start":10,"column_end":17},"name":"Instant","qualname":"::mutex::RawMutexTimed::Instant","value":"type Instant;","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Instant type used for `try_lock_until`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":6704,"byte_end":6716,"line_start":80,"line_end":80,"column_start":8,"column_end":20},"name":"try_lock_for","qualname":"::mutex::RawMutexTimed::try_lock_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":6832,"byte_end":6846,"line_start":83,"line_end":83,"column_start":8,"column_end":22},"name":"try_lock_until","qualname":"::mutex::RawMutexTimed::try_lock_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":42},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":7400,"byte_end":7405,"line_start":94,"line_end":94,"column_start":12,"column_end":17},"name":"Mutex","qualname":"::mutex::Mutex","value":"Mutex {  }","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46}],"decl_id":null,"docs":" A mutual exclusion primitive useful for protecting shared data","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":8662,"byte_end":8665,"line_start":145,"line_end":145,"column_start":12,"column_end":15},"name":"new","qualname":"<Mutex<R, T>>::new","value":"fn (val: T) -> Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"cfg(not (feature = \"nightly\"))","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":8604,"byte_end":8636,"line_start":143,"line_end":143,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":8641,"byte_end":8650,"line_start":144,"line_end":144,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":8903,"byte_end":8913,"line_start":155,"line_end":155,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Mutex<R, T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":8854,"byte_end":8863,"line_start":153,"line_end":153,"column_start":5,"column_end":14}},{"value":"allow(unused_unsafe)","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":8868,"byte_end":8891,"line_start":154,"line_end":154,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":9719,"byte_end":9723,"line_start":179,"line_end":179,"column_start":12,"column_end":16},"name":"lock","qualname":"<Mutex<R, T>>::lock","value":"fn (&self) -> MutexGuard<'_, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutex, blocking the current thread until it is able to do so.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":9698,"byte_end":9707,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":10116,"byte_end":10124,"line_start":192,"line_end":192,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<Mutex<R, T>>::try_lock","value":"fn (&self) -> Option<MutexGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":10095,"byte_end":10104,"line_start":191,"line_end":191,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":10532,"byte_end":10539,"line_start":205,"line_end":205,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Mutex<R, T>>::get_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":10511,"byte_end":10520,"line_start":204,"line_end":204,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":11123,"byte_end":11135,"line_start":221,"line_end":221,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<Mutex<R, T>>::force_unlock","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":11095,"byte_end":11104,"line_start":220,"line_end":220,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":11572,"byte_end":11575,"line_start":235,"line_end":235,"column_start":19,"column_end":22},"name":"raw","qualname":"<Mutex<R, T>>::raw","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw mutex object.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":11544,"byte_end":11553,"line_start":234,"line_end":234,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":12206,"byte_end":12223,"line_start":253,"line_end":253,"column_start":19,"column_end":36},"name":"force_unlock_fair","qualname":"<Mutex<R, T>>::force_unlock_fair","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex using a fair unlock procotol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":12178,"byte_end":12187,"line_start":252,"line_end":252,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":12623,"byte_end":12635,"line_start":265,"line_end":265,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<Mutex<R, T>>::try_lock_for","value":"fn (&self, timeout: R::Duration) -> Option<MutexGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":12602,"byte_end":12611,"line_start":264,"line_end":264,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":13126,"byte_end":13140,"line_start":279,"line_end":279,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<Mutex<R, T>>::try_lock_until","value":"fn (&self, timeout: R::Instant) -> Option<MutexGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":13105,"byte_end":13114,"line_start":278,"line_end":278,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":92},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":14658,"byte_end":14668,"line_start":328,"line_end":328,"column_start":12,"column_end":22},"name":"MutexGuard","qualname":"::mutex::MutexGuard","value":"MutexGuard {  }","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":97}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\n dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"must_use = \"if unused the Mutex will immediately unlock\"","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":14587,"byte_end":14646,"line_start":327,"line_end":327,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":15019,"byte_end":15024,"line_start":337,"line_end":337,"column_start":12,"column_end":17},"name":"mutex","qualname":"<MutexGuard>::mutex","value":"fn (s: &Self) -> &'a Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original `Mutex` object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":15489,"byte_end":15492,"line_start":350,"line_end":350,"column_start":12,"column_end":15},"name":"map","qualname":"<MutexGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedMutexGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":15468,"byte_end":15477,"line_start":349,"line_end":349,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":16322,"byte_end":16329,"line_start":374,"line_end":374,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MutexGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedMutexGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":16301,"byte_end":16310,"line_start":373,"line_end":373,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":17010,"byte_end":17018,"line_start":396,"line_end":396,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<MutexGuard>::unlocked","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":16989,"byte_end":16998,"line_start":395,"line_end":395,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":18034,"byte_end":18045,"line_start":420,"line_end":420,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MutexGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":18013,"byte_end":18022,"line_start":419,"line_end":419,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":18415,"byte_end":18428,"line_start":432,"line_end":432,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<MutexGuard>::unlocked_fair","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":18394,"byte_end":18403,"line_start":431,"line_end":431,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":18893,"byte_end":18897,"line_start":447,"line_end":447,"column_start":12,"column_end":16},"name":"bump","qualname":"<MutexGuard>::bump","value":"fn (s: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":18872,"byte_end":18881,"line_start":446,"line_end":446,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":151},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":20443,"byte_end":20459,"line_start":497,"line_end":497,"column_start":12,"column_end":28},"name":"MappedMutexGuard","qualname":"::mutex::MappedMutexGuard","value":"MappedMutexGuard {  }","parent":null,"children":[{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157}],"decl_id":null,"docs":" An RAII mutex guard returned by `MutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"must_use = \"if unused the Mutex will immediately unlock\"","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":20372,"byte_end":20431,"line_start":496,"line_end":496,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":21287,"byte_end":21290,"line_start":522,"line_end":522,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedMutexGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedMutexGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":21266,"byte_end":21275,"line_start":521,"line_end":521,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":22113,"byte_end":22120,"line_start":546,"line_end":546,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedMutexGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedMutexGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":22092,"byte_end":22101,"line_start":545,"line_end":545,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":23415,"byte_end":23426,"line_start":578,"line_end":578,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedMutexGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":23394,"byte_end":23403,"line_start":577,"line_end":577,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":224},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":25705,"byte_end":25716,"line_start":33,"line_end":33,"column_start":18,"column_end":29},"name":"GetThreadId","qualname":"::remutex::GetThreadId","value":"GetThreadId","parent":null,"children":[{"krate":0,"index":225},{"krate":0,"index":226}],"decl_id":null,"docs":" Helper trait which returns a non-zero thread ID.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":225},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":25752,"byte_end":25756,"line_start":35,"line_end":35,"column_start":11,"column_end":15},"name":"INIT","qualname":"::remutex::GetThreadId::INIT","value":"Self","parent":{"krate":0,"index":224},"children":[],"decl_id":null,"docs":" Initial value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":25867,"byte_end":25884,"line_start":39,"line_end":39,"column_start":8,"column_end":25},"name":"nonzero_thread_id","qualname":"::remutex::GetThreadId::nonzero_thread_id","value":"fn (&self) -> usize","parent":{"krate":0,"index":224},"children":[],"decl_id":null,"docs":" Returns a non-zero thread ID which identifies the current thread of\n execution.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":256},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":28730,"byte_end":28744,"line_start":141,"line_end":141,"column_start":12,"column_end":26},"name":"ReentrantMutex","qualname":"::remutex::ReentrantMutex","value":"ReentrantMutex {  }","parent":null,"children":[{"krate":0,"index":260},{"krate":0,"index":261}],"decl_id":null,"docs":" A mutex which can be recursively locked by a single thread.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":30451,"byte_end":30454,"line_start":205,"line_end":205,"column_start":12,"column_end":15},"name":"new","qualname":"<ReentrantMutex<R, G, T>>::new","value":"fn (val: T) -> ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reentrant mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"cfg(not (feature = \"nightly\"))","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":30393,"byte_end":30425,"line_start":203,"line_end":203,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":30430,"byte_end":30439,"line_start":204,"line_end":204,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":30897,"byte_end":30907,"line_start":220,"line_end":220,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ReentrantMutex<R, G, T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":30848,"byte_end":30857,"line_start":218,"line_end":218,"column_start":5,"column_end":14}},{"value":"allow(unused_unsafe)","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":30862,"byte_end":30885,"line_start":219,"line_end":219,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":31866,"byte_end":31870,"line_start":245,"line_end":245,"column_start":12,"column_end":16},"name":"lock","qualname":"<ReentrantMutex<R, G, T>>::lock","value":"fn (&self) -> ReentrantMutexGuard<'_, R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reentrant mutex, blocking the current thread until it is able\n to do so.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":31845,"byte_end":31854,"line_start":244,"line_end":244,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":32275,"byte_end":32283,"line_start":258,"line_end":258,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<ReentrantMutex<R, G, T>>::try_lock","value":"fn (&self) -> Option<ReentrantMutexGuard<'_, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":32254,"byte_end":32263,"line_start":257,"line_end":257,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":32712,"byte_end":32719,"line_start":271,"line_end":271,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ReentrantMutex<R, G, T>>::get_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":32691,"byte_end":32700,"line_start":270,"line_end":270,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":33321,"byte_end":33333,"line_start":287,"line_end":287,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<ReentrantMutex<R, G, T>>::force_unlock","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":33293,"byte_end":33302,"line_start":286,"line_end":286,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":33779,"byte_end":33782,"line_start":301,"line_end":301,"column_start":19,"column_end":22},"name":"raw","qualname":"<ReentrantMutex<R, G, T>>::raw","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw mutex object.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":33751,"byte_end":33760,"line_start":300,"line_end":300,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":34465,"byte_end":34482,"line_start":319,"line_end":319,"column_start":19,"column_end":36},"name":"force_unlock_fair","qualname":"<ReentrantMutex<R, G, T>>::force_unlock_fair","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":34437,"byte_end":34446,"line_start":318,"line_end":318,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":34910,"byte_end":34922,"line_start":331,"line_end":331,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<ReentrantMutex<R, G, T>>::try_lock_for","value":"fn (&self, timeout: R::Duration) -> Option<ReentrantMutexGuard<'_, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":34889,"byte_end":34898,"line_start":330,"line_end":330,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":35425,"byte_end":35439,"line_start":345,"line_end":345,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<ReentrantMutex<R, G, T>>::try_lock_until","value":"fn (&self, timeout: R::Instant) -> Option<ReentrantMutexGuard<'_, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":35404,"byte_end":35413,"line_start":344,"line_end":344,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":316},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":37167,"byte_end":37186,"line_start":397,"line_end":397,"column_start":12,"column_end":31},"name":"ReentrantMutexGuard","qualname":"::remutex::ReentrantMutexGuard","value":"ReentrantMutexGuard {  }","parent":null,"children":[{"krate":0,"index":321},{"krate":0,"index":322}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\n is dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"must_use = \"if unused the ReentrantMutex will immediately unlock\"","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":37087,"byte_end":37155,"line_start":396,"line_end":396,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":37647,"byte_end":37654,"line_start":409,"line_end":409,"column_start":12,"column_end":19},"name":"remutex","qualname":"<ReentrantMutexGuard>::remutex","value":"fn (s: &Self) -> &'a ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original `ReentrantMutex` object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":38160,"byte_end":38163,"line_start":422,"line_end":422,"column_start":12,"column_end":15},"name":"map","qualname":"<ReentrantMutexGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedReentrantMutexGuard<'a, R, G, U>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":38139,"byte_end":38148,"line_start":421,"line_end":421,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":39033,"byte_end":39040,"line_start":446,"line_end":446,"column_start":12,"column_end":19},"name":"try_map","qualname":"<ReentrantMutexGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedReentrantMutexGuard<'a, R, G, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":39012,"byte_end":39021,"line_start":445,"line_end":445,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":39769,"byte_end":39777,"line_start":471,"line_end":471,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<ReentrantMutexGuard>::unlocked","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":39748,"byte_end":39757,"line_start":470,"line_end":470,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":40843,"byte_end":40854,"line_start":497,"line_end":497,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<ReentrantMutexGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":40822,"byte_end":40831,"line_start":496,"line_end":496,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":349},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":41226,"byte_end":41239,"line_start":509,"line_end":509,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<ReentrantMutexGuard>::unlocked_fair","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":41205,"byte_end":41214,"line_start":508,"line_end":508,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":41708,"byte_end":41712,"line_start":524,"line_end":524,"column_start":12,"column_end":16},"name":"bump","qualname":"<ReentrantMutexGuard>::bump","value":"fn (s: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":41687,"byte_end":41696,"line_start":523,"line_end":523,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":378},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":43297,"byte_end":43322,"line_start":578,"line_end":578,"column_start":12,"column_end":37},"name":"MappedReentrantMutexGuard","qualname":"::remutex::MappedReentrantMutexGuard","value":"MappedReentrantMutexGuard {  }","parent":null,"children":[{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385}],"decl_id":null,"docs":" An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"must_use = \"if unused the ReentrantMutex will immediately unlock\"","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":43217,"byte_end":43285,"line_start":577,"line_end":577,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":44169,"byte_end":44172,"line_start":601,"line_end":601,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedReentrantMutexGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedReentrantMutexGuard<'a, R, G, U>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":44148,"byte_end":44157,"line_start":600,"line_end":600,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":45031,"byte_end":45038,"line_start":625,"line_end":625,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedReentrantMutexGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedReentrantMutexGuard<'a, R, G, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":45010,"byte_end":45019,"line_start":624,"line_end":624,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":46411,"byte_end":46422,"line_start":662,"line_end":662,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedReentrantMutexGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":46390,"byte_end":46399,"line_start":661,"line_end":661,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":442},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":48618,"byte_end":48627,"line_start":31,"line_end":31,"column_start":18,"column_end":27},"name":"RawRwLock","qualname":"::rwlock::RawRwLock","value":"RawRwLock","parent":null,"children":[{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450}],"decl_id":null,"docs":" Basic operations for a reader-writer lock.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":443},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":48688,"byte_end":48692,"line_start":33,"line_end":33,"column_start":11,"column_end":15},"name":"INIT","qualname":"::rwlock::RawRwLock::INIT","value":"Self","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":" Initial value for an unlocked `RwLock`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":444},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":48857,"byte_end":48868,"line_start":37,"line_end":37,"column_start":10,"column_end":21},"name":"GuardMarker","qualname":"::rwlock::RawRwLock::GuardMarker","value":"type GuardMarker;","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":" Marker type which determines whether a lock guard should be `Send`. Use\n one of the `GuardSend` or `GuardNoSend` helper types here.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":445},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":48965,"byte_end":48976,"line_start":40,"line_end":40,"column_start":8,"column_end":19},"name":"lock_shared","qualname":"::rwlock::RawRwLock::lock_shared","value":"fn (&self) -> ()","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":" Acquires a shared lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":49053,"byte_end":49068,"line_start":43,"line_end":43,"column_start":8,"column_end":23},"name":"try_lock_shared","qualname":"::rwlock::RawRwLock::try_lock_shared","value":"fn (&self) -> bool","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock without blocking.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":49125,"byte_end":49138,"line_start":46,"line_end":46,"column_start":8,"column_end":21},"name":"unlock_shared","qualname":"::rwlock::RawRwLock::unlock_shared","value":"fn (&self) -> ()","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":" Releases a shared lock.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":49246,"byte_end":49260,"line_start":49,"line_end":49,"column_start":8,"column_end":22},"name":"lock_exclusive","qualname":"::rwlock::RawRwLock::lock_exclusive","value":"fn (&self) -> ()","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":" Acquires an exclusive lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":49341,"byte_end":49359,"line_start":52,"line_end":52,"column_start":8,"column_end":26},"name":"try_lock_exclusive","qualname":"::rwlock::RawRwLock::try_lock_exclusive","value":"fn (&self) -> bool","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock without blocking.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":49420,"byte_end":49436,"line_start":55,"line_end":55,"column_start":8,"column_end":24},"name":"unlock_exclusive","qualname":"::rwlock::RawRwLock::unlock_exclusive","value":"fn (&self) -> ()","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":" Releases an exclusive lock.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":451},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":49828,"byte_end":49841,"line_start":64,"line_end":64,"column_start":18,"column_end":31},"name":"RawRwLockFair","qualname":"::rwlock::RawRwLockFair","value":"RawRwLockFair: RawRwLock","parent":null,"children":[{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455}],"decl_id":null,"docs":" Additional methods for RwLocks which support fair unlocking.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":49923,"byte_end":49941,"line_start":66,"line_end":66,"column_start":8,"column_end":26},"name":"unlock_shared_fair","qualname":"::rwlock::RawRwLockFair::unlock_shared_fair","value":"fn (&self) -> ()","parent":{"krate":0,"index":451},"children":[],"decl_id":null,"docs":" Releases a shared lock using a fair unlock protocol.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":50023,"byte_end":50044,"line_start":69,"line_end":69,"column_start":8,"column_end":29},"name":"unlock_exclusive_fair","qualname":"::rwlock::RawRwLockFair::unlock_exclusive_fair","value":"fn (&self) -> ()","parent":{"krate":0,"index":451},"children":[],"decl_id":null,"docs":" Releases an exclusive lock using a fair unlock protocol.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":50355,"byte_end":50366,"line_start":76,"line_end":76,"column_start":8,"column_end":19},"name":"bump_shared","qualname":"::rwlock::RawRwLockFair::bump_shared","value":"fn (&self) -> ()","parent":{"krate":0,"index":451},"children":[],"decl_id":null,"docs":" Temporarily yields a shared lock to a waiting thread if there is one.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":50757,"byte_end":50771,"line_start":86,"line_end":86,"column_start":8,"column_end":22},"name":"bump_exclusive","qualname":"::rwlock::RawRwLockFair::bump_exclusive","value":"fn (&self) -> ()","parent":{"krate":0,"index":451},"children":[],"decl_id":null,"docs":" Temporarily yields an exclusive lock to a waiting thread if there is one.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":456},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":50988,"byte_end":51006,"line_start":94,"line_end":94,"column_start":18,"column_end":36},"name":"RawRwLockDowngrade","qualname":"::rwlock::RawRwLockDowngrade","value":"RawRwLockDowngrade: RawRwLock","parent":null,"children":[{"krate":0,"index":457}],"decl_id":null,"docs":" Additional methods for RwLocks which support atomically downgrading an\n exclusive lock to a shared lock.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":51173,"byte_end":51182,"line_start":97,"line_end":97,"column_start":8,"column_end":17},"name":"downgrade","qualname":"::rwlock::RawRwLockDowngrade::downgrade","value":"fn (&self) -> ()","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Atomically downgrades an exclusive lock into a shared lock without\n allowing any thread to take an exclusive lock in the meantime.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":458},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":51424,"byte_end":51438,"line_start":104,"line_end":104,"column_start":18,"column_end":32},"name":"RawRwLockTimed","qualname":"::rwlock::RawRwLockTimed","value":"RawRwLockTimed: RawRwLock","parent":null,"children":[{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464}],"decl_id":null,"docs":" Additional methods for RwLocks which support locking with timeouts.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":459},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":51508,"byte_end":51516,"line_start":106,"line_end":106,"column_start":10,"column_end":18},"name":"Duration","qualname":"::rwlock::RawRwLockTimed::Duration","value":"type Duration;","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Duration type used for `try_lock_for`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":460},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":51576,"byte_end":51583,"line_start":109,"line_end":109,"column_start":10,"column_end":17},"name":"Instant","qualname":"::rwlock::RawRwLockTimed::Instant","value":"type Instant;","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Instant type used for `try_lock_until`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":51663,"byte_end":51682,"line_start":112,"line_end":112,"column_start":8,"column_end":27},"name":"try_lock_shared_for","qualname":"::rwlock::RawRwLockTimed::try_lock_shared_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":51802,"byte_end":51823,"line_start":115,"line_end":115,"column_start":8,"column_end":29},"name":"try_lock_shared_until","qualname":"::rwlock::RawRwLockTimed::try_lock_shared_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":51946,"byte_end":51968,"line_start":118,"line_end":118,"column_start":8,"column_end":30},"name":"try_lock_exclusive_for","qualname":"::rwlock::RawRwLockTimed::try_lock_exclusive_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":52092,"byte_end":52116,"line_start":121,"line_end":121,"column_start":8,"column_end":32},"name":"try_lock_exclusive_until","qualname":"::rwlock::RawRwLockTimed::try_lock_exclusive_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":465},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":52549,"byte_end":52567,"line_start":131,"line_end":131,"column_start":18,"column_end":36},"name":"RawRwLockRecursive","qualname":"::rwlock::RawRwLockRecursive","value":"RawRwLockRecursive: RawRwLock","parent":null,"children":[{"krate":0,"index":466},{"krate":0,"index":467}],"decl_id":null,"docs":" Additional methods for RwLocks which support recursive read locks.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":52668,"byte_end":52689,"line_start":133,"line_end":133,"column_start":8,"column_end":29},"name":"lock_shared_recursive","qualname":"::rwlock::RawRwLockRecursive::lock_shared_recursive","value":"fn (&self) -> ()","parent":{"krate":0,"index":465},"children":[],"decl_id":null,"docs":" Acquires a shared lock without deadlocking in case of a recursive lock.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":52797,"byte_end":52822,"line_start":136,"line_end":136,"column_start":8,"column_end":33},"name":"try_lock_shared_recursive","qualname":"::rwlock::RawRwLockRecursive::try_lock_shared_recursive","value":"fn (&self) -> bool","parent":{"krate":0,"index":465},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock without deadlocking in case of a recursive lock.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":468},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":52943,"byte_end":52966,"line_start":140,"line_end":140,"column_start":18,"column_end":41},"name":"RawRwLockRecursiveTimed","qualname":"::rwlock::RawRwLockRecursiveTimed","value":"RawRwLockRecursiveTimed: RawRwLockRecursive + RawRwLockTimed","parent":null,"children":[{"krate":0,"index":469},{"krate":0,"index":470}],"decl_id":null,"docs":" Additional methods for RwLocks which support recursive read locks and timeouts.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":53140,"byte_end":53169,"line_start":143,"line_end":143,"column_start":8,"column_end":37},"name":"try_lock_shared_recursive_for","qualname":"::rwlock::RawRwLockRecursiveTimed::try_lock_shared_recursive_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":468},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached, without\n deadlocking in case of a recursive lock.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":53346,"byte_end":53377,"line_start":147,"line_end":147,"column_start":8,"column_end":39},"name":"try_lock_shared_recursive_until","qualname":"::rwlock::RawRwLockRecursiveTimed::try_lock_shared_recursive_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":468},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached, without\n deadlocking in case of a recursive lock.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":471},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":53753,"byte_end":53769,"line_start":156,"line_end":156,"column_start":18,"column_end":34},"name":"RawRwLockUpgrade","qualname":"::rwlock::RawRwLockUpgrade","value":"RawRwLockUpgrade: RawRwLock","parent":null,"children":[{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476}],"decl_id":null,"docs":" Additional methods for RwLocks which support atomically upgrading a shared\n lock to an exclusive lock.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":53882,"byte_end":53897,"line_start":158,"line_end":158,"column_start":8,"column_end":23},"name":"lock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::lock_upgradable","value":"fn (&self) -> ()","parent":{"krate":0,"index":471},"children":[],"decl_id":null,"docs":" Acquires an upgradable lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":53979,"byte_end":53998,"line_start":161,"line_end":161,"column_start":8,"column_end":27},"name":"try_lock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::try_lock_upgradable","value":"fn (&self) -> bool","parent":{"krate":0,"index":471},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock without blocking.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":54060,"byte_end":54077,"line_start":164,"line_end":164,"column_start":8,"column_end":25},"name":"unlock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::unlock_upgradable","value":"fn (&self) -> ()","parent":{"krate":0,"index":471},"children":[],"decl_id":null,"docs":" Releases an upgradable lock.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":54152,"byte_end":54159,"line_start":167,"line_end":167,"column_start":8,"column_end":15},"name":"upgrade","qualname":"::rwlock::RawRwLockUpgrade::upgrade","value":"fn (&self) -> ()","parent":{"krate":0,"index":471},"children":[],"decl_id":null,"docs":" Upgrades an upgradable lock to an exclusive lock.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":54270,"byte_end":54281,"line_start":171,"line_end":171,"column_start":8,"column_end":19},"name":"try_upgrade","qualname":"::rwlock::RawRwLockUpgrade::try_upgrade","value":"fn (&self) -> bool","parent":{"krate":0,"index":471},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock without\n blocking.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":477},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":54408,"byte_end":54428,"line_start":176,"line_end":176,"column_start":18,"column_end":38},"name":"RawRwLockUpgradeFair","qualname":"::rwlock::RawRwLockUpgradeFair","value":"RawRwLockUpgradeFair: RawRwLockUpgrade + RawRwLockFair","parent":null,"children":[{"krate":0,"index":478},{"krate":0,"index":479}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and fair\n unlocking.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":54538,"byte_end":54560,"line_start":178,"line_end":178,"column_start":8,"column_end":30},"name":"unlock_upgradable_fair","qualname":"::rwlock::RawRwLockUpgradeFair::unlock_upgradable_fair","value":"fn (&self) -> ()","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Releases an upgradable lock using a fair unlock protocol.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":54884,"byte_end":54899,"line_start":185,"line_end":185,"column_start":8,"column_end":23},"name":"bump_upgradable","qualname":"::rwlock::RawRwLockUpgradeFair::bump_upgradable","value":"fn (&self) -> ()","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Temporarily yields an upgradable lock to a waiting thread if there is one.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":480},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":55098,"byte_end":55123,"line_start":193,"line_end":193,"column_start":18,"column_end":43},"name":"RawRwLockUpgradeDowngrade","qualname":"::rwlock::RawRwLockUpgradeDowngrade","value":"RawRwLockUpgradeDowngrade: RawRwLockUpgrade + RawRwLockDowngrade","parent":null,"children":[{"krate":0,"index":481},{"krate":0,"index":482}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and lock\n downgrading.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":55228,"byte_end":55248,"line_start":195,"line_end":195,"column_start":8,"column_end":28},"name":"downgrade_upgradable","qualname":"::rwlock::RawRwLockUpgradeDowngrade::downgrade_upgradable","value":"fn (&self) -> ()","parent":{"krate":0,"index":480},"children":[],"decl_id":null,"docs":" Downgrades an upgradable lock to a shared lock.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":55325,"byte_end":55348,"line_start":198,"line_end":198,"column_start":8,"column_end":31},"name":"downgrade_to_upgradable","qualname":"::rwlock::RawRwLockUpgradeDowngrade::downgrade_to_upgradable","value":"fn (&self) -> ()","parent":{"krate":0,"index":480},"children":[],"decl_id":null,"docs":" Downgrades an exclusive lock to an upgradable lock.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":483},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":55474,"byte_end":55495,"line_start":203,"line_end":203,"column_start":18,"column_end":39},"name":"RawRwLockUpgradeTimed","qualname":"::rwlock::RawRwLockUpgradeTimed","value":"RawRwLockUpgradeTimed: RawRwLockUpgrade + RawRwLockTimed","parent":null,"children":[{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":486},{"krate":0,"index":487}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and locking\n with timeouts.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":55615,"byte_end":55638,"line_start":205,"line_end":205,"column_start":8,"column_end":31},"name":"try_lock_upgradable_for","qualname":"::rwlock::RawRwLockUpgradeTimed::try_lock_upgradable_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":483},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":485},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":55763,"byte_end":55788,"line_start":208,"line_end":208,"column_start":8,"column_end":33},"name":"try_lock_upgradable_until","qualname":"::rwlock::RawRwLockUpgradeTimed::try_lock_upgradable_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":483},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":55941,"byte_end":55956,"line_start":212,"line_end":212,"column_start":8,"column_end":23},"name":"try_upgrade_for","qualname":"::rwlock::RawRwLockUpgradeTimed::try_upgrade_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":483},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock until a\n timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":487},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":56110,"byte_end":56127,"line_start":216,"line_end":216,"column_start":8,"column_end":25},"name":"try_upgrade_until","qualname":"::rwlock::RawRwLockUpgradeTimed::try_upgrade_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":483},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock until a\n timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":488},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":56879,"byte_end":56885,"line_start":231,"line_end":231,"column_start":12,"column_end":18},"name":"RwLock","qualname":"::rwlock::RwLock","value":"RwLock {  }","parent":null,"children":[{"krate":0,"index":491},{"krate":0,"index":492}],"decl_id":null,"docs":" A reader-writer lock","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":58171,"byte_end":58174,"line_start":282,"line_end":282,"column_start":12,"column_end":15},"name":"new","qualname":"<RwLock<R, T>>::new","value":"fn (val: T) -> RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of an `RwLock<T>` which is unlocked.\n","sig":null,"attributes":[{"value":"cfg(not (feature = \"nightly\"))","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":58113,"byte_end":58145,"line_start":280,"line_end":280,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":58150,"byte_end":58159,"line_start":281,"line_end":281,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":58417,"byte_end":58427,"line_start":292,"line_end":292,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<RwLock<R, T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `RwLock`, returning the underlying data.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":58368,"byte_end":58377,"line_start":290,"line_end":290,"column_start":5,"column_end":14}},{"value":"allow(unused_unsafe)","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":58382,"byte_end":58405,"line_start":291,"line_end":291,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":509},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":59496,"byte_end":59500,"line_start":327,"line_end":327,"column_start":12,"column_end":16},"name":"read","qualname":"<RwLock<R, T>>::read","value":"fn (&self) -> RwLockReadGuard<'_, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":59475,"byte_end":59484,"line_start":326,"line_end":326,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":59942,"byte_end":59950,"line_start":340,"line_end":340,"column_start":12,"column_end":20},"name":"try_read","qualname":"<RwLock<R, T>>::try_read","value":"fn (&self) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":59921,"byte_end":59930,"line_start":339,"line_end":339,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":511},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":60504,"byte_end":60509,"line_start":357,"line_end":357,"column_start":12,"column_end":17},"name":"write","qualname":"<RwLock<R, T>>::write","value":"fn (&self) -> RwLockWriteGuard<'_, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with exclusive write access, blocking the current\n thread until it can be acquired.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":60483,"byte_end":60492,"line_start":356,"line_end":356,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":512},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":60947,"byte_end":60956,"line_start":370,"line_end":370,"column_start":12,"column_end":21},"name":"try_write","qualname":"<RwLock<R, T>>::try_write","value":"fn (&self) -> Option<RwLockWriteGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to lock this `RwLock` with exclusive write access.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":60926,"byte_end":60935,"line_start":369,"line_end":369,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":513},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":61387,"byte_end":61394,"line_start":383,"line_end":383,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RwLock<R, T>>::get_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":61366,"byte_end":61375,"line_start":382,"line_end":382,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":62001,"byte_end":62018,"line_start":399,"line_end":399,"column_start":19,"column_end":36},"name":"force_unlock_read","qualname":"<RwLock<R, T>>::force_unlock_read","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a read lock.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":61973,"byte_end":61982,"line_start":398,"line_end":398,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":62609,"byte_end":62627,"line_start":415,"line_end":415,"column_start":19,"column_end":37},"name":"force_unlock_write","qualname":"<RwLock<R, T>>::force_unlock_write","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a write lock.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":62581,"byte_end":62590,"line_start":414,"line_end":414,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":63093,"byte_end":63096,"line_start":429,"line_end":429,"column_start":19,"column_end":22},"name":"raw","qualname":"<RwLock<R, T>>::raw","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw reader-writer lock object.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":63752,"byte_end":63774,"line_start":447,"line_end":447,"column_start":19,"column_end":41},"name":"force_unlock_read_fair","qualname":"<RwLock<R, T>>::force_unlock_read_fair","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a read lock using a fair unlock procotol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":63724,"byte_end":63733,"line_start":446,"line_end":446,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":64399,"byte_end":64422,"line_start":463,"line_end":463,"column_start":19,"column_end":42},"name":"force_unlock_write_fair","qualname":"<RwLock<R, T>>::force_unlock_write_fair","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a write lock using a fair unlock procotol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":64371,"byte_end":64380,"line_start":462,"line_end":462,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":525},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":64874,"byte_end":64886,"line_start":476,"line_end":476,"column_start":12,"column_end":24},"name":"try_read_for","qualname":"<RwLock<R, T>>::try_read_for","value":"fn (&self, timeout: R::Duration) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":64853,"byte_end":64862,"line_start":475,"line_end":475,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":65434,"byte_end":65448,"line_start":491,"line_end":491,"column_start":12,"column_end":26},"name":"try_read_until","qualname":"<RwLock<R, T>>::try_read_until","value":"fn (&self, timeout: R::Instant) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":65413,"byte_end":65422,"line_start":490,"line_end":490,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":66004,"byte_end":66017,"line_start":506,"line_end":506,"column_start":12,"column_end":25},"name":"try_write_for","qualname":"<RwLock<R, T>>::try_write_for","value":"fn (&self, timeout: R::Duration) -> Option<RwLockWriteGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":65983,"byte_end":65992,"line_start":505,"line_end":505,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":66577,"byte_end":66592,"line_start":521,"line_end":521,"column_start":12,"column_end":27},"name":"try_write_until","qualname":"<RwLock<R, T>>::try_write_until","value":"fn (&self, timeout: R::Instant) -> Option<RwLockWriteGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":66556,"byte_end":66565,"line_start":520,"line_end":520,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":67658,"byte_end":67672,"line_start":547,"line_end":547,"column_start":12,"column_end":26},"name":"read_recursive","qualname":"<RwLock<R, T>>::read_recursive","value":"fn (&self) -> RwLockReadGuard<'_, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":67637,"byte_end":67646,"line_start":546,"line_end":546,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":68295,"byte_end":68313,"line_start":563,"line_end":563,"column_start":12,"column_end":30},"name":"try_read_recursive","qualname":"<RwLock<R, T>>::try_read_recursive","value":"fn (&self) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":68274,"byte_end":68283,"line_start":562,"line_end":562,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":69095,"byte_end":69117,"line_start":584,"line_end":584,"column_start":12,"column_end":34},"name":"try_read_recursive_for","qualname":"<RwLock<R, T>>::try_read_recursive_for","value":"fn (&self, timeout: R::Duration) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":69074,"byte_end":69083,"line_start":583,"line_end":583,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":69698,"byte_end":69722,"line_start":602,"line_end":602,"column_start":12,"column_end":36},"name":"try_read_recursive_until","qualname":"<RwLock<R, T>>::try_read_recursive_until","value":"fn (&self, timeout: R::Instant) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":69677,"byte_end":69686,"line_start":601,"line_end":601,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":70697,"byte_end":70712,"line_start":633,"line_end":633,"column_start":12,"column_end":27},"name":"upgradable_read","qualname":"<RwLock<R, T>>::upgradable_read","value":"fn (&self) -> RwLockUpgradableReadGuard<'_, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with upgradable read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":70676,"byte_end":70685,"line_start":632,"line_end":632,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":71178,"byte_end":71197,"line_start":646,"line_end":646,"column_start":12,"column_end":31},"name":"try_upgradable_read","qualname":"<RwLock<R, T>>::try_upgradable_read","value":"fn (&self) -> Option<RwLockUpgradableReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":71157,"byte_end":71166,"line_start":645,"line_end":645,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":71795,"byte_end":71818,"line_start":663,"line_end":663,"column_start":12,"column_end":35},"name":"try_upgradable_read_for","qualname":"<RwLock<R, T>>::try_upgradable_read_for","value":"fn (&self, timeout: R::Duration) -> Option<RwLockUpgradableReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":71774,"byte_end":71783,"line_start":662,"line_end":662,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":72413,"byte_end":72438,"line_start":681,"line_end":681,"column_start":12,"column_end":37},"name":"try_upgradable_read_until","qualname":"<RwLock<R, T>>::try_upgradable_read_until","value":"fn (&self, timeout: R::Instant) -> Option<RwLockUpgradableReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":72392,"byte_end":72401,"line_start":680,"line_end":680,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":566},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":73846,"byte_end":73861,"line_start":730,"line_end":730,"column_start":12,"column_end":27},"name":"RwLockReadGuard","qualname":"::rwlock::RwLockReadGuard","value":"RwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":570},{"krate":0,"index":571}],"decl_id":null,"docs":" RAII structure used to release the shared read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":73774,"byte_end":73834,"line_start":729,"line_end":729,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":74227,"byte_end":74233,"line_start":739,"line_end":739,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockReadGuard>::rwlock","value":"fn (s: &Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":581},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":74713,"byte_end":74716,"line_start":752,"line_end":752,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockReadGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedRwLockReadGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":74692,"byte_end":74701,"line_start":751,"line_end":751,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":75560,"byte_end":75567,"line_start":776,"line_end":776,"column_start":12,"column_end":19},"name":"try_map","qualname":"<RwLockReadGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedRwLockReadGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockReadGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":75539,"byte_end":75548,"line_start":775,"line_end":775,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":76319,"byte_end":76327,"line_start":800,"line_end":800,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockReadGuard>::unlocked","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":76298,"byte_end":76307,"line_start":799,"line_end":799,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":77385,"byte_end":77396,"line_start":824,"line_end":824,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockReadGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":77364,"byte_end":77373,"line_start":823,"line_end":823,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":77783,"byte_end":77796,"line_start":836,"line_end":836,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockReadGuard>::unlocked_fair","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":77762,"byte_end":77771,"line_start":835,"line_end":835,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":78280,"byte_end":78284,"line_start":851,"line_end":851,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockReadGuard>::bump","value":"fn (s: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":78259,"byte_end":78268,"line_start":850,"line_end":850,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":620},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":79418,"byte_end":79434,"line_start":891,"line_end":891,"column_start":12,"column_end":28},"name":"RwLockWriteGuard","qualname":"::rwlock::RwLockWriteGuard","value":"RwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":624},{"krate":0,"index":625}],"decl_id":null,"docs":" RAII structure used to release the exclusive write access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":79346,"byte_end":79406,"line_start":890,"line_end":890,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":79806,"byte_end":79812,"line_start":900,"line_end":900,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockWriteGuard>::rwlock","value":"fn (s: &Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":80295,"byte_end":80298,"line_start":913,"line_end":913,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockWriteGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedRwLockWriteGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":80274,"byte_end":80283,"line_start":912,"line_end":912,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":638},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":81159,"byte_end":81166,"line_start":937,"line_end":937,"column_start":12,"column_end":19},"name":"try_map","qualname":"<RwLockWriteGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedRwLockWriteGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":81138,"byte_end":81147,"line_start":936,"line_end":936,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":641},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":81867,"byte_end":81875,"line_start":959,"line_end":959,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockWriteGuard>::unlocked","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":81846,"byte_end":81855,"line_start":958,"line_end":958,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":648},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":82486,"byte_end":82495,"line_start":976,"line_end":976,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockWriteGuard>::downgrade","value":"fn (s: Self) -> RwLockReadGuard<'a, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into a read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":653},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":83170,"byte_end":83193,"line_start":994,"line_end":994,"column_start":12,"column_end":35},"name":"downgrade_to_upgradable","qualname":"<RwLockWriteGuard>::downgrade_to_upgradable","value":"fn (s: Self) -> RwLockUpgradableReadGuard<'a, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into an upgradable read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":658},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":84338,"byte_end":84349,"line_start":1019,"line_end":1019,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockWriteGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":84317,"byte_end":84326,"line_start":1018,"line_end":1018,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":659},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":84739,"byte_end":84752,"line_start":1031,"line_end":1031,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockWriteGuard>::unlocked_fair","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":84718,"byte_end":84727,"line_start":1030,"line_end":1030,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":662},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":85243,"byte_end":85247,"line_start":1046,"line_end":1046,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockWriteGuard>::bump","value":"fn (s: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":85222,"byte_end":85231,"line_start":1045,"line_end":1045,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":689},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":86589,"byte_end":86614,"line_start":1093,"line_end":1093,"column_start":12,"column_end":37},"name":"RwLockUpgradableReadGuard","qualname":"::rwlock::RwLockUpgradableReadGuard","value":"RwLockUpgradableReadGuard {  }","parent":null,"children":[{"krate":0,"index":693},{"krate":0,"index":694}],"decl_id":null,"docs":" RAII structure used to release the upgradable read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":86517,"byte_end":86577,"line_start":1092,"line_end":1092,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":703},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":87026,"byte_end":87032,"line_start":1105,"line_end":1105,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockUpgradableReadGuard>::rwlock","value":"fn (s: &Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":87325,"byte_end":87333,"line_start":1114,"line_end":1114,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockUpgradableReadGuard>::unlocked","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":87304,"byte_end":87313,"line_start":1113,"line_end":1113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":87675,"byte_end":87682,"line_start":1125,"line_end":1125,"column_start":12,"column_end":19},"name":"upgrade","qualname":"<RwLockUpgradableReadGuard>::upgrade","value":"fn (s: Self) -> RwLockWriteGuard<'a, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Atomically upgrades an upgradable read lock lock into a exclusive write lock,\n blocking the current thread until it can be acquired.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":88109,"byte_end":88120,"line_start":1138,"line_end":1138,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<RwLockUpgradableReadGuard>::try_upgrade","value":"fn (s: Self) -> Result<RwLockWriteGuard<'a, R, T>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive write lock.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":713},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":89352,"byte_end":89363,"line_start":1166,"line_end":1166,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockUpgradableReadGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":89331,"byte_end":89340,"line_start":1165,"line_end":1165,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":714},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":89754,"byte_end":89767,"line_start":1178,"line_end":1178,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockUpgradableReadGuard>::unlocked_fair","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":89733,"byte_end":89742,"line_start":1177,"line_end":1177,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":717},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":90270,"byte_end":90274,"line_start":1193,"line_end":1193,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockUpgradableReadGuard>::bump","value":"fn (s: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":90249,"byte_end":90258,"line_start":1192,"line_end":1192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":90815,"byte_end":90824,"line_start":1206,"line_end":1206,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockUpgradableReadGuard>::downgrade","value":"fn (s: Self) -> RwLockReadGuard<'a, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades an upgradable read lock lock into a shared read lock\n without allowing any writers to take exclusive access of the lock in the\n meantime.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":727},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":91416,"byte_end":91431,"line_start":1223,"line_end":1223,"column_start":12,"column_end":27},"name":"try_upgrade_for","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_for","value":"fn (s: Self, timeout: R::Duration) -> Result<RwLockWriteGuard<'a, R, T>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":92082,"byte_end":92099,"line_start":1245,"line_end":1245,"column_start":12,"column_end":29},"name":"try_upgrade_until","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_until","value":"fn (s: Self, timeout: R::Instant) -> Result<RwLockWriteGuard<'a, R, T>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":92061,"byte_end":92070,"line_start":1244,"line_end":1244,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":750},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":93944,"byte_end":93965,"line_start":1307,"line_end":1307,"column_start":12,"column_end":33},"name":"MappedRwLockReadGuard","qualname":"::rwlock::MappedRwLockReadGuard","value":"MappedRwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":754},{"krate":0,"index":755},{"krate":0,"index":756}],"decl_id":null,"docs":" An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":93872,"byte_end":93932,"line_start":1306,"line_end":1306,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":769},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":94811,"byte_end":94814,"line_start":1329,"line_end":1329,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedRwLockReadGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedRwLockReadGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":94790,"byte_end":94799,"line_start":1328,"line_end":1328,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":95649,"byte_end":95656,"line_start":1353,"line_end":1353,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedRwLockReadGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedRwLockReadGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockReadGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":95628,"byte_end":95637,"line_start":1352,"line_end":1352,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":779},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":96981,"byte_end":96992,"line_start":1385,"line_end":1385,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedRwLockReadGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":96960,"byte_end":96969,"line_start":1384,"line_end":1384,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":801},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":98462,"byte_end":98484,"line_start":1436,"line_end":1436,"column_start":12,"column_end":34},"name":"MappedRwLockWriteGuard","qualname":"::rwlock::MappedRwLockWriteGuard","value":"MappedRwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":805},{"krate":0,"index":806},{"krate":0,"index":807}],"decl_id":null,"docs":" An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":98390,"byte_end":98450,"line_start":1435,"line_end":1435,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":820},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":99343,"byte_end":99346,"line_start":1461,"line_end":1461,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedRwLockWriteGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedRwLockWriteGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":99322,"byte_end":99331,"line_start":1460,"line_end":1460,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":823},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":100198,"byte_end":100205,"line_start":1485,"line_end":1485,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedRwLockWriteGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedRwLockWriteGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":100177,"byte_end":100186,"line_start":1484,"line_end":1484,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":830},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":101085,"byte_end":101094,"line_start":1510,"line_end":1510,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<MappedRwLockWriteGuard>::downgrade","value":"fn (s: Self) -> MappedRwLockReadGuard<'a, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into a read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":835},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":102258,"byte_end":102269,"line_start":1537,"line_end":1537,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedRwLockWriteGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":102237,"byte_end":102246,"line_start":1536,"line_end":1536,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":8156,"byte_end":8161,"line_start":128,"line_end":128,"column_start":60,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":8230,"byte_end":8235,"line_start":129,"line_end":129,"column_start":60,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":8267,"byte_end":8272,"line_start":131,"line_end":131,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":9007,"byte_end":9012,"line_start":160,"line_end":160,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":11651,"byte_end":11656,"line_start":240,"line_end":240,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":12308,"byte_end":12313,"line_start":258,"line_end":258,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":13384,"byte_end":13389,"line_start":288,"line_end":288,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":13527,"byte_end":13532,"line_start":295,"line_end":295,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":13678,"byte_end":13683,"line_start":302,"line_end":302,"column_start":58,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":13972,"byte_end":13989,"line_start":308,"line_end":308,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":91}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":14857,"byte_end":14867,"line_start":333,"line_end":333,"column_start":74,"column_end":84},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":14925,"byte_end":14935,"line_start":335,"line_end":335,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":110},{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":17226,"byte_end":17236,"line_start":406,"line_end":406,"column_start":48,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":19004,"byte_end":19014,"line_start":452,"line_end":452,"column_start":54,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":129},{"krate":0,"index":130}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":19198,"byte_end":19208,"line_start":460,"line_end":460,"column_start":57,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":19383,"byte_end":19393,"line_start":467,"line_end":467,"column_start":53,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":19558,"byte_end":19568,"line_start":474,"line_end":474,"column_start":72,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":145}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":19764,"byte_end":19774,"line_start":480,"line_end":480,"column_start":76,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":20640,"byte_end":20656,"line_start":504,"line_end":504,"column_start":9,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":20730,"byte_end":20746,"line_start":507,"line_end":507,"column_start":60,"column_end":76},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":20836,"byte_end":20852,"line_start":512,"line_end":512,"column_start":44,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":170},{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":22601,"byte_end":22617,"line_start":564,"line_end":564,"column_start":48,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":23553,"byte_end":23569,"line_start":584,"line_end":584,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":185},{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":23741,"byte_end":23757,"line_start":592,"line_end":592,"column_start":57,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":23920,"byte_end":23936,"line_start":599,"line_end":599,"column_start":53,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":24095,"byte_end":24111,"line_start":606,"line_end":606,"column_start":72,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":201}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":24311,"byte_end":24327,"line_start":613,"line_end":613,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":26087,"byte_end":26104,"line_start":49,"line_end":49,"column_start":35,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":237},{"krate":0,"index":239},{"krate":0,"index":241},{"krate":0,"index":243}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":27292,"byte_end":27309,"line_start":95,"line_end":95,"column_start":39,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":247},{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":27936,"byte_end":27953,"line_start":118,"line_end":118,"column_start":40,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":252},{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":29639,"byte_end":29653,"line_start":178,"line_end":178,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":29753,"byte_end":29767,"line_start":182,"line_end":182,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":29819,"byte_end":29833,"line_start":186,"line_end":186,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":274},{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":31017,"byte_end":31031,"line_start":225,"line_end":225,"column_start":46,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":33880,"byte_end":33894,"line_start":306,"line_end":306,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":34583,"byte_end":34597,"line_start":324,"line_end":324,"column_start":51,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":296}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":35711,"byte_end":35725,"line_start":354,"line_end":354,"column_start":68,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":301}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":35903,"byte_end":35917,"line_start":361,"line_end":361,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":36103,"byte_end":36117,"line_start":368,"line_end":368,"column_start":74,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":36469,"byte_end":36486,"line_start":377,"line_end":377,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":315}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":37430,"byte_end":37449,"line_start":403,"line_end":403,"column_start":9,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":37532,"byte_end":37551,"line_start":407,"line_end":407,"column_start":65,"column_end":84},"value":"","parent":null,"children":[{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":337},{"krate":0,"index":340}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":40014,"byte_end":40033,"line_start":482,"line_end":482,"column_start":5,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":352}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":41846,"byte_end":41865,"line_start":530,"line_end":530,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":358},{"krate":0,"index":359}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":42075,"byte_end":42094,"line_start":540,"line_end":540,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":42289,"byte_end":42308,"line_start":549,"line_end":549,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":42532,"byte_end":42551,"line_start":557,"line_end":557,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":377}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":43567,"byte_end":43592,"line_start":585,"line_end":585,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":43679,"byte_end":43704,"line_start":590,"line_end":590,"column_start":5,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":396},{"krate":0,"index":399}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":45576,"byte_end":45601,"line_start":647,"line_end":647,"column_start":5,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":407}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":46574,"byte_end":46599,"line_start":669,"line_end":669,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":413},{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":46795,"byte_end":46820,"line_start":679,"line_end":679,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":420}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":47007,"byte_end":47032,"line_start":688,"line_end":688,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":426}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":47256,"byte_end":47281,"line_start":696,"line_end":696,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":432}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":57643,"byte_end":57649,"line_start":265,"line_end":265,"column_start":61,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":57726,"byte_end":57732,"line_start":266,"line_end":266,"column_start":68,"column_end":74},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":57765,"byte_end":57771,"line_start":268,"line_end":268,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":502},{"krate":0,"index":503}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":58522,"byte_end":58528,"line_start":297,"line_end":297,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":511},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":516}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":63173,"byte_end":63179,"line_start":434,"line_end":434,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":520},{"krate":0,"index":521}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":64518,"byte_end":64524,"line_start":468,"line_end":468,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":66846,"byte_end":66852,"line_start":530,"line_end":530,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":532},{"krate":0,"index":533}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":68543,"byte_end":68549,"line_start":572,"line_end":572,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":537},{"krate":0,"index":538}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":70002,"byte_end":70008,"line_start":614,"line_end":614,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":71435,"byte_end":71441,"line_start":655,"line_end":655,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":548},{"krate":0,"index":549}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":72743,"byte_end":72749,"line_start":693,"line_end":693,"column_start":53,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":553}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":72890,"byte_end":72896,"line_start":700,"line_end":700,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":557}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":73045,"byte_end":73051,"line_start":707,"line_end":707,"column_start":59,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":561}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":73341,"byte_end":73358,"line_start":713,"line_end":713,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":565}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":74043,"byte_end":74058,"line_start":735,"line_end":735,"column_start":68,"column_end":83},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":74117,"byte_end":74132,"line_start":737,"line_end":737,"column_start":45,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":584},{"krate":0,"index":587}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":76552,"byte_end":76567,"line_start":810,"line_end":810,"column_start":49,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":78400,"byte_end":78415,"line_start":856,"line_end":856,"column_start":55,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":603},{"krate":0,"index":604}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":78597,"byte_end":78612,"line_start":864,"line_end":864,"column_start":54,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":78786,"byte_end":78801,"line_start":871,"line_end":871,"column_start":73,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":614}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":79002,"byte_end":79017,"line_start":878,"line_end":878,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":619}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":79620,"byte_end":79636,"line_start":896,"line_end":896,"column_start":68,"column_end":84},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":79695,"byte_end":79711,"line_start":898,"line_end":898,"column_start":45,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":638},{"krate":0,"index":641}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":82111,"byte_end":82127,"line_start":969,"line_end":969,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":648}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":82783,"byte_end":82799,"line_start":987,"line_end":987,"column_start":61,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":653}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":83503,"byte_end":83519,"line_start":1005,"line_end":1005,"column_start":49,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":662}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":85366,"byte_end":85382,"line_start":1051,"line_end":1051,"column_start":55,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":667},{"krate":0,"index":668}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":85568,"byte_end":85584,"line_start":1059,"line_end":1059,"column_start":58,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":673}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":85761,"byte_end":85777,"line_start":1066,"line_end":1066,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":85954,"byte_end":85970,"line_start":1073,"line_end":1073,"column_start":73,"column_end":89},"value":"","parent":null,"children":[{"krate":0,"index":683}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":86171,"byte_end":86187,"line_start":1080,"line_end":1080,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":688}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":86814,"byte_end":86839,"line_start":1099,"line_end":1099,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":86906,"byte_end":86931,"line_start":1103,"line_end":1103,"column_start":52,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":707},{"krate":0,"index":708}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":88499,"byte_end":88524,"line_start":1152,"line_end":1152,"column_start":56,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":717}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":90400,"byte_end":90425,"line_start":1198,"line_end":1198,"column_start":61,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":722}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":91119,"byte_end":91144,"line_start":1217,"line_end":1217,"column_start":57,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":727},{"krate":0,"index":728}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":92541,"byte_end":92566,"line_start":1262,"line_end":1262,"column_start":62,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":733},{"krate":0,"index":734}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":92755,"byte_end":92780,"line_start":1270,"line_end":1270,"column_start":61,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":739}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":92969,"byte_end":92994,"line_start":1278,"line_end":1278,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":744}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":93202,"byte_end":93227,"line_start":1286,"line_end":1286,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":749}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":94135,"byte_end":94156,"line_start":1313,"line_end":1313,"column_start":68,"column_end":89},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":94230,"byte_end":94251,"line_start":1314,"line_end":1314,"column_start":61,"column_end":82},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":94342,"byte_end":94363,"line_start":1319,"line_end":1319,"column_start":45,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":769},{"krate":0,"index":772}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":96136,"byte_end":96157,"line_start":1371,"line_end":1371,"column_start":49,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":779}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":97127,"byte_end":97148,"line_start":1391,"line_end":1391,"column_start":55,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":784},{"krate":0,"index":785}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":97317,"byte_end":97338,"line_start":1399,"line_end":1399,"column_start":54,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":790}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":97509,"byte_end":97530,"line_start":1407,"line_end":1407,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":795}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":97731,"byte_end":97752,"line_start":1415,"line_end":1415,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":800}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":98660,"byte_end":98682,"line_start":1443,"line_end":1443,"column_start":9,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":98757,"byte_end":98779,"line_start":1446,"line_end":1446,"column_start":61,"column_end":83},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":98870,"byte_end":98892,"line_start":1451,"line_end":1451,"column_start":45,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":820},{"krate":0,"index":823}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":100704,"byte_end":100726,"line_start":1503,"line_end":1503,"column_start":54,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":830}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":101411,"byte_end":101433,"line_start":1523,"line_end":1523,"column_start":49,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":835}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":102407,"byte_end":102429,"line_start":1543,"line_end":1543,"column_start":55,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":840},{"krate":0,"index":841}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":102602,"byte_end":102624,"line_start":1551,"line_end":1551,"column_start":58,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":846}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":102788,"byte_end":102810,"line_start":1558,"line_end":1558,"column_start":54,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":851}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":102984,"byte_end":103006,"line_start":1566,"line_end":1566,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":856}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":103207,"byte_end":103229,"line_start":1574,"line_end":1574,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":861}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":5790,"byte_end":5798,"line_start":53,"line_end":53,"column_start":32,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":28},"to":{"krate":0,"index":34}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":6486,"byte_end":6494,"line_start":72,"line_end":72,"column_start":33,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":28},"to":{"krate":0,"index":37}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":8156,"byte_end":8161,"line_start":128,"line_end":128,"column_start":60,"column_end":65},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":42},"to":{"krate":1,"index":1535}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":8230,"byte_end":8235,"line_start":129,"line_end":129,"column_start":60,"column_end":65},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":42},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":8267,"byte_end":8272,"line_start":131,"line_end":131,"column_start":22,"column_end":27},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":42},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":9007,"byte_end":9012,"line_start":160,"line_end":160,"column_start":30,"column_end":35},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":42},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":11651,"byte_end":11656,"line_start":240,"line_end":240,"column_start":34,"column_end":39},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":42},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":12308,"byte_end":12313,"line_start":258,"line_end":258,"column_start":35,"column_end":40},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":42},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":13384,"byte_end":13389,"line_start":288,"line_end":288,"column_start":52,"column_end":57},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":42},"to":{"krate":1,"index":2189}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":13527,"byte_end":13532,"line_start":295,"line_end":295,"column_start":34,"column_end":39},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":42},"to":{"krate":1,"index":2206}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":13678,"byte_end":13683,"line_start":302,"line_end":302,"column_start":58,"column_end":63},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":42},"to":{"krate":1,"index":7185}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":13972,"byte_end":13989,"line_start":308,"line_end":308,"column_start":37,"column_end":54},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":7185}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":14857,"byte_end":14867,"line_start":333,"line_end":333,"column_start":74,"column_end":84},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":92},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":14925,"byte_end":14935,"line_start":335,"line_end":335,"column_start":44,"column_end":54},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":92},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":17226,"byte_end":17236,"line_start":406,"line_end":406,"column_start":48,"column_end":58},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":92},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":19004,"byte_end":19014,"line_start":452,"line_end":452,"column_start":54,"column_end":64},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":92},"to":{"krate":1,"index":1704}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":19198,"byte_end":19208,"line_start":460,"line_end":460,"column_start":57,"column_end":67},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":92},"to":{"krate":1,"index":1715}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":19383,"byte_end":19393,"line_start":467,"line_end":467,"column_start":53,"column_end":63},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":92},"to":{"krate":1,"index":1726}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":19558,"byte_end":19568,"line_start":474,"line_end":474,"column_start":72,"column_end":82},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":92},"to":{"krate":1,"index":7185}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":19764,"byte_end":19774,"line_start":480,"line_end":480,"column_start":76,"column_end":86},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":92},"to":{"krate":1,"index":7190}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":20640,"byte_end":20656,"line_start":504,"line_end":504,"column_start":9,"column_end":25},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":151},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":20730,"byte_end":20746,"line_start":507,"line_end":507,"column_start":60,"column_end":76},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":151},"to":{"krate":1,"index":1535}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":20836,"byte_end":20852,"line_start":512,"line_end":512,"column_start":44,"column_end":60},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":151},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":22601,"byte_end":22617,"line_start":564,"line_end":564,"column_start":48,"column_end":64},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":151},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":23553,"byte_end":23569,"line_start":584,"line_end":584,"column_start":54,"column_end":70},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":151},"to":{"krate":1,"index":1704}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":23741,"byte_end":23757,"line_start":592,"line_end":592,"column_start":57,"column_end":73},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":151},"to":{"krate":1,"index":1715}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":23920,"byte_end":23936,"line_start":599,"line_end":599,"column_start":53,"column_end":69},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":151},"to":{"krate":1,"index":1726}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":24095,"byte_end":24111,"line_start":606,"line_end":606,"column_start":72,"column_end":88},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":151},"to":{"krate":1,"index":7185}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/mutex.rs","byte_start":24311,"byte_end":24327,"line_start":613,"line_end":613,"column_start":9,"column_end":25},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":151},"to":{"krate":1,"index":7190}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":26087,"byte_end":26104,"line_start":49,"line_end":49,"column_start":35,"column_end":52},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":227},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":27292,"byte_end":27309,"line_start":95,"line_end":95,"column_start":39,"column_end":56},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":227},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":27936,"byte_end":27953,"line_start":118,"line_end":118,"column_start":40,"column_end":57},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":227},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":29639,"byte_end":29653,"line_start":178,"line_end":178,"column_start":9,"column_end":23},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":256},"to":{"krate":1,"index":1535}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":29753,"byte_end":29767,"line_start":182,"line_end":182,"column_start":9,"column_end":23},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":256},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":29819,"byte_end":29833,"line_start":186,"line_end":186,"column_start":38,"column_end":52},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":256},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":31017,"byte_end":31031,"line_start":225,"line_end":225,"column_start":46,"column_end":60},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":256},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":33880,"byte_end":33894,"line_start":306,"line_end":306,"column_start":50,"column_end":64},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":256},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":34583,"byte_end":34597,"line_start":324,"line_end":324,"column_start":51,"column_end":65},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":256},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":35711,"byte_end":35725,"line_start":354,"line_end":354,"column_start":68,"column_end":82},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":256},"to":{"krate":1,"index":2189}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":35903,"byte_end":35917,"line_start":361,"line_end":361,"column_start":50,"column_end":64},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":256},"to":{"krate":1,"index":2206}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":36103,"byte_end":36117,"line_start":368,"line_end":368,"column_start":74,"column_end":88},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":256},"to":{"krate":1,"index":7185}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":36469,"byte_end":36486,"line_start":377,"line_end":377,"column_start":37,"column_end":54},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":312},"to":{"krate":1,"index":7185}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":37430,"byte_end":37449,"line_start":403,"line_end":403,"column_start":9,"column_end":28},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":316},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":37532,"byte_end":37551,"line_start":407,"line_end":407,"column_start":65,"column_end":84},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":316},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":40014,"byte_end":40033,"line_start":482,"line_end":482,"column_start":5,"column_end":24},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":316},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":41846,"byte_end":41865,"line_start":530,"line_end":530,"column_start":9,"column_end":28},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":316},"to":{"krate":1,"index":1704}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":42075,"byte_end":42094,"line_start":540,"line_end":540,"column_start":9,"column_end":28},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":316},"to":{"krate":1,"index":1726}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":42289,"byte_end":42308,"line_start":549,"line_end":549,"column_start":9,"column_end":28},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":316},"to":{"krate":1,"index":7185}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":42532,"byte_end":42551,"line_start":557,"line_end":557,"column_start":9,"column_end":28},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":316},"to":{"krate":1,"index":7190}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":43567,"byte_end":43592,"line_start":585,"line_end":585,"column_start":9,"column_end":34},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":378},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":43679,"byte_end":43704,"line_start":590,"line_end":590,"column_start":5,"column_end":30},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":378},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":45576,"byte_end":45601,"line_start":647,"line_end":647,"column_start":5,"column_end":30},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":378},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":46574,"byte_end":46599,"line_start":669,"line_end":669,"column_start":9,"column_end":34},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":378},"to":{"krate":1,"index":1704}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":46795,"byte_end":46820,"line_start":679,"line_end":679,"column_start":9,"column_end":34},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":378},"to":{"krate":1,"index":1726}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":47007,"byte_end":47032,"line_start":688,"line_end":688,"column_start":9,"column_end":34},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":378},"to":{"krate":1,"index":7185}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/remutex.rs","byte_start":47256,"byte_end":47281,"line_start":696,"line_end":696,"column_start":9,"column_end":34},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":378},"to":{"krate":1,"index":7190}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":49843,"byte_end":49852,"line_start":64,"line_end":64,"column_start":33,"column_end":42},"kind":"SuperTrait","from":{"krate":0,"index":442},"to":{"krate":0,"index":451}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":51008,"byte_end":51017,"line_start":94,"line_end":94,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":442},"to":{"krate":0,"index":456}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":51440,"byte_end":51449,"line_start":104,"line_end":104,"column_start":34,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":442},"to":{"krate":0,"index":458}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":52569,"byte_end":52578,"line_start":131,"line_end":131,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":442},"to":{"krate":0,"index":465}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":52968,"byte_end":52986,"line_start":140,"line_end":140,"column_start":43,"column_end":61},"kind":"SuperTrait","from":{"krate":0,"index":465},"to":{"krate":0,"index":468}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":52989,"byte_end":53003,"line_start":140,"line_end":140,"column_start":64,"column_end":78},"kind":"SuperTrait","from":{"krate":0,"index":458},"to":{"krate":0,"index":468}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":53771,"byte_end":53780,"line_start":156,"line_end":156,"column_start":36,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":442},"to":{"krate":0,"index":471}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":54430,"byte_end":54446,"line_start":176,"line_end":176,"column_start":40,"column_end":56},"kind":"SuperTrait","from":{"krate":0,"index":471},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":54449,"byte_end":54462,"line_start":176,"line_end":176,"column_start":59,"column_end":72},"kind":"SuperTrait","from":{"krate":0,"index":451},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":55125,"byte_end":55141,"line_start":193,"line_end":193,"column_start":45,"column_end":61},"kind":"SuperTrait","from":{"krate":0,"index":471},"to":{"krate":0,"index":480}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":55144,"byte_end":55162,"line_start":193,"line_end":193,"column_start":64,"column_end":82},"kind":"SuperTrait","from":{"krate":0,"index":456},"to":{"krate":0,"index":480}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":55497,"byte_end":55513,"line_start":203,"line_end":203,"column_start":41,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":471},"to":{"krate":0,"index":483}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":55516,"byte_end":55530,"line_start":203,"line_end":203,"column_start":60,"column_end":74},"kind":"SuperTrait","from":{"krate":0,"index":458},"to":{"krate":0,"index":483}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":57643,"byte_end":57649,"line_start":265,"line_end":265,"column_start":61,"column_end":67},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":488},"to":{"krate":1,"index":1535}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":57726,"byte_end":57732,"line_start":266,"line_end":266,"column_start":68,"column_end":74},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":488},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":57765,"byte_end":57771,"line_start":268,"line_end":268,"column_start":23,"column_end":29},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":488},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":58522,"byte_end":58528,"line_start":297,"line_end":297,"column_start":31,"column_end":37},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":488},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":63173,"byte_end":63179,"line_start":434,"line_end":434,"column_start":35,"column_end":41},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":488},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":64518,"byte_end":64524,"line_start":468,"line_end":468,"column_start":36,"column_end":42},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":488},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":66846,"byte_end":66852,"line_start":530,"line_end":530,"column_start":40,"column_end":46},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":488},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":68543,"byte_end":68549,"line_start":572,"line_end":572,"column_start":45,"column_end":51},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":488},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":70002,"byte_end":70008,"line_start":614,"line_end":614,"column_start":38,"column_end":44},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":488},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":71435,"byte_end":71441,"line_start":655,"line_end":655,"column_start":43,"column_end":49},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":488},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":72743,"byte_end":72749,"line_start":693,"line_end":693,"column_start":53,"column_end":59},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":488},"to":{"krate":1,"index":2189}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":72890,"byte_end":72896,"line_start":700,"line_end":700,"column_start":35,"column_end":41},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":488},"to":{"krate":1,"index":2206}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":73045,"byte_end":73051,"line_start":707,"line_end":707,"column_start":59,"column_end":65},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":488},"to":{"krate":1,"index":7185}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":73341,"byte_end":73358,"line_start":713,"line_end":713,"column_start":37,"column_end":54},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":562},"to":{"krate":1,"index":7185}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":74043,"byte_end":74058,"line_start":735,"line_end":735,"column_start":68,"column_end":83},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":566},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":74117,"byte_end":74132,"line_start":737,"line_end":737,"column_start":45,"column_end":60},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":566},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":76552,"byte_end":76567,"line_start":810,"line_end":810,"column_start":49,"column_end":64},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":566},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":78400,"byte_end":78415,"line_start":856,"line_end":856,"column_start":55,"column_end":70},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":566},"to":{"krate":1,"index":1704}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":78597,"byte_end":78612,"line_start":864,"line_end":864,"column_start":54,"column_end":69},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":566},"to":{"krate":1,"index":1726}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":78786,"byte_end":78801,"line_start":871,"line_end":871,"column_start":73,"column_end":88},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":566},"to":{"krate":1,"index":7185}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":79002,"byte_end":79017,"line_start":878,"line_end":878,"column_start":9,"column_end":24},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":566},"to":{"krate":1,"index":7190}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":79620,"byte_end":79636,"line_start":896,"line_end":896,"column_start":68,"column_end":84},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":620},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":79695,"byte_end":79711,"line_start":898,"line_end":898,"column_start":45,"column_end":61},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":620},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":82111,"byte_end":82127,"line_start":969,"line_end":969,"column_start":54,"column_end":70},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":620},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":82783,"byte_end":82799,"line_start":987,"line_end":987,"column_start":61,"column_end":77},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":620},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":83503,"byte_end":83519,"line_start":1005,"line_end":1005,"column_start":49,"column_end":65},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":620},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":85366,"byte_end":85382,"line_start":1051,"line_end":1051,"column_start":55,"column_end":71},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":620},"to":{"krate":1,"index":1704}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":85568,"byte_end":85584,"line_start":1059,"line_end":1059,"column_start":58,"column_end":74},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":620},"to":{"krate":1,"index":1715}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":85761,"byte_end":85777,"line_start":1066,"line_end":1066,"column_start":54,"column_end":70},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":620},"to":{"krate":1,"index":1726}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":85954,"byte_end":85970,"line_start":1073,"line_end":1073,"column_start":73,"column_end":89},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":620},"to":{"krate":1,"index":7185}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":86171,"byte_end":86187,"line_start":1080,"line_end":1080,"column_start":9,"column_end":25},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":620},"to":{"krate":1,"index":7190}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":86814,"byte_end":86839,"line_start":1099,"line_end":1099,"column_start":9,"column_end":34},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":689},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":86906,"byte_end":86931,"line_start":1103,"line_end":1103,"column_start":52,"column_end":77},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":689},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":88499,"byte_end":88524,"line_start":1152,"line_end":1152,"column_start":56,"column_end":81},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":689},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":90400,"byte_end":90425,"line_start":1198,"line_end":1198,"column_start":61,"column_end":86},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":689},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":91119,"byte_end":91144,"line_start":1217,"line_end":1217,"column_start":57,"column_end":82},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":689},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":92541,"byte_end":92566,"line_start":1262,"line_end":1262,"column_start":62,"column_end":87},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":689},"to":{"krate":1,"index":1704}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":92755,"byte_end":92780,"line_start":1270,"line_end":1270,"column_start":61,"column_end":86},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":689},"to":{"krate":1,"index":1726}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":92969,"byte_end":92994,"line_start":1278,"line_end":1278,"column_start":9,"column_end":34},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":689},"to":{"krate":1,"index":7185}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":93202,"byte_end":93227,"line_start":1286,"line_end":1286,"column_start":9,"column_end":34},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":689},"to":{"krate":1,"index":7190}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":94135,"byte_end":94156,"line_start":1313,"line_end":1313,"column_start":68,"column_end":89},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":750},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":94230,"byte_end":94251,"line_start":1314,"line_end":1314,"column_start":61,"column_end":82},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":750},"to":{"krate":1,"index":1535}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":94342,"byte_end":94363,"line_start":1319,"line_end":1319,"column_start":45,"column_end":66},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":750},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":96136,"byte_end":96157,"line_start":1371,"line_end":1371,"column_start":49,"column_end":70},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":750},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":97127,"byte_end":97148,"line_start":1391,"line_end":1391,"column_start":55,"column_end":76},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":750},"to":{"krate":1,"index":1704}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":97317,"byte_end":97338,"line_start":1399,"line_end":1399,"column_start":54,"column_end":75},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":750},"to":{"krate":1,"index":1726}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":97509,"byte_end":97530,"line_start":1407,"line_end":1407,"column_start":9,"column_end":30},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":750},"to":{"krate":1,"index":7185}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":97731,"byte_end":97752,"line_start":1415,"line_end":1415,"column_start":9,"column_end":30},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":750},"to":{"krate":1,"index":7190}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":98660,"byte_end":98682,"line_start":1443,"line_end":1443,"column_start":9,"column_end":31},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":801},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":98757,"byte_end":98779,"line_start":1446,"line_end":1446,"column_start":61,"column_end":83},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":801},"to":{"krate":1,"index":1535}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":98870,"byte_end":98892,"line_start":1451,"line_end":1451,"column_start":45,"column_end":67},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":801},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":100704,"byte_end":100726,"line_start":1503,"line_end":1503,"column_start":54,"column_end":76},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":801},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":101411,"byte_end":101433,"line_start":1523,"line_end":1523,"column_start":49,"column_end":71},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":801},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":102407,"byte_end":102429,"line_start":1543,"line_end":1543,"column_start":55,"column_end":77},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":801},"to":{"krate":1,"index":1704}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":102602,"byte_end":102624,"line_start":1551,"line_end":1551,"column_start":58,"column_end":80},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":801},"to":{"krate":1,"index":1715}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":102788,"byte_end":102810,"line_start":1558,"line_end":1558,"column_start":54,"column_end":76},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":801},"to":{"krate":1,"index":1726}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":102984,"byte_end":103006,"line_start":1566,"line_end":1566,"column_start":9,"column_end":31},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":801},"to":{"krate":1,"index":7185}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.2.0/src/rwlock.rs","byte_start":103207,"byte_end":103229,"line_start":1574,"line_end":1574,"column_start":9,"column_end":31},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":801},"to":{"krate":1,"index":7190}}]}