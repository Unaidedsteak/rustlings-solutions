{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0","program":"/home/zyphen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","textwrap","/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=f6d91a31e322bf39","-C","extra-filename=-f6d91a31e322bf39","--out-dir","/home/zyphen/Projects/rustlings/rustlings/target/rls/debug/deps","-L","dependency=/home/zyphen/Projects/rustlings/rustlings/target/rls/debug/deps","--extern","unicode_width=/home/zyphen/Projects/rustlings/rustlings/target/rls/debug/deps/libunicode_width-158c55b79a41cb97.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/zyphen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/zyphen/Projects/rustlings/rustlings/target/rls/debug/deps/libtextwrap-f6d91a31e322bf39.rmeta"},"prelude":{"crate_id":{"name":"textwrap","disambiguator":[9365148495925440253,1776723620129341651]},"crate_root":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src","external_crates":[{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[4418738106075590160,6298063093324017560]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[9113878364975505769,4626460723841361367]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10636203250160794641,6979396832464280682]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7259142600435629501,12221323364939802703]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[245280942947536957,12219005383890086938]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6161946279237914842,16521306710208745576]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[6542909105960794691,9677219093962929367]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5468829561226316808,7834745881253856659]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17700629721805382410,8884445337419759755]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5673318663856259921,7992701887106127366]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","num":11,"id":{"name":"backtrace","disambiguator":[14096840682646779984,4894716104918169263]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[17167590092810160364,15681868143498786567]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","num":13,"id":{"name":"backtrace_sys","disambiguator":[9809686796458150241,12960706147778414440]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[14218938340851961837,11099897245983054425]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","num":15,"id":{"name":"unicode_width","disambiguator":[12585255883353125606,6163311652112691974]}}],"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":0,"byte_end":33202,"line_start":1,"line_end":987,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":21},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":1970,"byte_end":1976,"line_start":64,"line_end":64,"column_start":22,"column_end":28},"alias_span":null,"name":"dedent","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":19},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":1999,"byte_end":2005,"line_start":65,"line_end":65,"column_start":22,"column_end":28},"alias_span":null,"name":"indent","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":83},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":2043,"byte_end":2057,"line_start":68,"line_end":68,"column_start":21,"column_end":35},"alias_span":null,"name":"HyphenSplitter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":77},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":2059,"byte_end":2072,"line_start":68,"line_end":68,"column_start":37,"column_end":50},"alias_span":null,"name":"NoHyphenation","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":26},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":2074,"byte_end":2086,"line_start":68,"line_end":68,"column_start":52,"column_end":64},"alias_span":null,"name":"WordSplitter","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":0,"byte_end":33202,"line_start":1,"line_end":987,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":35},{"krate":0,"index":89},{"krate":0,"index":101},{"krate":0,"index":97},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":105},{"krate":0,"index":110},{"krate":0,"index":54},{"krate":0,"index":114},{"krate":0,"index":120},{"krate":0,"index":59},{"krate":0,"index":65},{"krate":0,"index":125},{"krate":0,"index":136},{"krate":0,"index":66},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76}],"decl_id":null,"docs":" `textwrap` provides functions for word wrapping and filling text.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":1547,"byte_end":1569,"line_start":45,"line_end":45,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":1570,"byte_end":1609,"line_start":46,"line_end":46,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":19},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/indentation.rs","byte_start":34085,"byte_end":34091,"line_start":50,"line_end":50,"column_start":8,"column_end":14},"name":"indent","qualname":"::indentation::indent","value":"fn (s: &str, prefix: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Add prefix to each non-empty line.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":21},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/indentation.rs","byte_start":34763,"byte_end":34769,"line_start":80,"line_end":80,"column_start":8,"column_end":14},"name":"dedent","qualname":"::indentation::dedent","value":"fn (s: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Removes common leading whitespace from each line.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":26},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/splitting.rs","byte_start":41914,"byte_end":41926,"line_start":28,"line_end":28,"column_start":11,"column_end":23},"name":"WordSplitter","qualname":"::splitting::WordSplitter","value":"WordSplitter","parent":null,"children":[{"krate":0,"index":27}],"decl_id":null,"docs":" An interface for splitting words.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/splitting.rs","byte_start":42516,"byte_end":42521,"line_start":44,"line_end":44,"column_start":8,"column_end":13},"name":"split","qualname":"::splitting::WordSplitter::split","value":"fn <'w> (&self, word: &'w str) -> Vec<(&'w str, &'w str, &'w str)>","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":" Return all possible splits of word. Each split is a triple\n with a head, a hyphen, and a tail where `head + &hyphen +\n &tail == word`. The hyphen can be empty if there is already a\n hyphen in the head.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":77},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/splitting.rs","byte_start":42971,"byte_end":42984,"line_start":59,"line_end":59,"column_start":12,"column_end":25},"name":"NoHyphenation","qualname":"::splitting::NoHyphenation","value":"","parent":null,"children":[],"decl_id":null,"docs":" Use this as a [`Wrapper.splitter`] to avoid any kind of\n hyphenation:","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":83},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/splitting.rs","byte_start":43449,"byte_end":43463,"line_start":75,"line_end":75,"column_start":12,"column_end":26},"name":"HyphenSplitter","qualname":"::splitting::HyphenSplitter","value":"","parent":null,"children":[],"decl_id":null,"docs":" Simple and default way to split words: splitting on existing\n hyphens only.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":89},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":2717,"byte_end":2724,"line_start":84,"line_end":84,"column_start":12,"column_end":19},"name":"Wrapper","qualname":"::Wrapper","value":"Wrapper { width, initial_indent, subsequent_indent, break_words, splitter }","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96}],"decl_id":null,"docs":" A Wrapper holds settings for wrapping and filling text. Use it\n when the convenience [`wrap_iter`], [`wrap`] and [`fill`] functions\n are not flexible enough.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":92},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":2820,"byte_end":2825,"line_start":86,"line_end":86,"column_start":9,"column_end":14},"name":"width","qualname":"::Wrapper::width","value":"usize","parent":{"krate":0,"index":89},"children":[],"decl_id":null,"docs":" The width in columns at which the text will be wrapped.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":93},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":2897,"byte_end":2911,"line_start":88,"line_end":88,"column_start":9,"column_end":23},"name":"initial_indent","qualname":"::Wrapper::initial_indent","value":"&'a str","parent":{"krate":0,"index":89},"children":[],"decl_id":null,"docs":" Indentation used for the first line of output.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":94},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":2987,"byte_end":3004,"line_start":90,"line_end":90,"column_start":9,"column_end":26},"name":"subsequent_indent","qualname":"::Wrapper::subsequent_indent","value":"&'a str","parent":{"krate":0,"index":89},"children":[],"decl_id":null,"docs":" Indentation used for subsequent lines of output.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":95},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":3172,"byte_end":3183,"line_start":94,"line_end":94,"column_start":9,"column_end":20},"name":"break_words","qualname":"::Wrapper::break_words","value":"bool","parent":{"krate":0,"index":89},"children":[],"decl_id":null,"docs":" Allow long words to be broken if they cannot fit on a line.\n When set to `false`, some lines may be longer than\n `self.width`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":96},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":3385,"byte_end":3393,"line_start":98,"line_end":98,"column_start":9,"column_end":17},"name":"splitter","qualname":"::Wrapper::splitter","value":"S","parent":{"krate":0,"index":89},"children":[],"decl_id":null,"docs":" The method for splitting words. If the `hyphenation` feature\n is enabled, you can use a `hyphenation::Standard` dictionary\n here to get language-aware hyphenation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":3831,"byte_end":3834,"line_start":109,"line_end":109,"column_start":12,"column_end":15},"name":"new","qualname":"<Wrapper>::new","value":"fn (width: usize) -> Wrapper<'a, HyphenSplitter>","parent":null,"children":[],"decl_id":null,"docs":" Create a new Wrapper for wrapping at the specified width. By\n default, we allow words longer than `width` to be broken. A\n [`HyphenSplitter`] will be used by default for splitting\n words. See the [`WordSplitter`] trait for other options.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":4908,"byte_end":4921,"line_start":139,"line_end":139,"column_start":12,"column_end":25},"name":"with_splitter","qualname":"<Wrapper>::with_splitter","value":"fn (width: usize, splitter: S) -> Wrapper<'a, S>","parent":null,"children":[],"decl_id":null,"docs":" Use the given [`WordSplitter`] to create a new Wrapper for\n wrapping at the specified width. By default, we allow words\n longer than `width` to be broken.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":5705,"byte_end":5719,"line_start":165,"line_end":165,"column_start":12,"column_end":26},"name":"initial_indent","qualname":"<Wrapper>::initial_indent","value":"fn (self, indent: &'a str) -> Wrapper<'a, S>","parent":null,"children":[],"decl_id":null,"docs":" Change [`self.initial_indent`]. The initial indentation is\n used on the very first line of output.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":6445,"byte_end":6462,"line_start":190,"line_end":190,"column_start":12,"column_end":29},"name":"subsequent_indent","qualname":"<Wrapper>::subsequent_indent","value":"fn (self, indent: &'a str) -> Wrapper<'a, S>","parent":null,"children":[],"decl_id":null,"docs":" Change [`self.subsequent_indent`]. The subsequent indentation\n is used on lines following the first line of output.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":6849,"byte_end":6860,"line_start":202,"line_end":202,"column_start":12,"column_end":23},"name":"break_words","qualname":"<Wrapper>::break_words","value":"fn (self, setting: bool) -> Wrapper<'a, S>","parent":null,"children":[],"decl_id":null,"docs":" Change [`self.break_words`]. This controls if words longer\n than `self.width` can be broken, or if they will be left\n sticking out into the right margin.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":7799,"byte_end":7803,"line_start":231,"line_end":231,"column_start":12,"column_end":16},"name":"fill","qualname":"<Wrapper>::fill","value":"fn (&self, s: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Fill a line of text at `self.width` characters. Strings are\n wrapped based on their displayed width, not their size in\n bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":9505,"byte_end":9509,"line_start":285,"line_end":285,"column_start":12,"column_end":16},"name":"wrap","qualname":"<Wrapper>::wrap","value":"fn (&self, s: &'a str) -> Vec<Cow<'a, str>>","parent":null,"children":[],"decl_id":null,"docs":" Wrap a line of text at `self.width` characters. Strings are\n wrapped based on their displayed width, not their size in\n bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":11435,"byte_end":11444,"line_start":331,"line_end":331,"column_start":12,"column_end":21},"name":"wrap_iter","qualname":"<Wrapper>::wrap_iter","value":"fn <'w> (&'w self, s: &'a str) -> WrapIter<'w, 'a, S>","parent":null,"children":[],"decl_id":null,"docs":" Lazily wrap a line of text at `self.width` characters. Strings\n are wrapped based on their displayed width, not their size in\n bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":12920,"byte_end":12934,"line_start":371,"line_end":371,"column_start":12,"column_end":26},"name":"into_wrap_iter","qualname":"<Wrapper>::into_wrap_iter","value":"fn (self, s: &'a str) -> IntoWrapIter<'a, S>","parent":null,"children":[],"decl_id":null,"docs":" Lazily wrap a line of text at `self.width` characters. Strings\n are wrapped based on their displayed width, not their size in\n bytes.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":105},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":13612,"byte_end":13624,"line_start":391,"line_end":391,"column_start":12,"column_end":24},"name":"IntoWrapIter","qualname":"::IntoWrapIter","value":"IntoWrapIter {  }","parent":null,"children":[{"krate":0,"index":108},{"krate":0,"index":109}],"decl_id":null,"docs":" An iterator over the lines of the input string which owns a\n `Wrapper`. An instance of `IntoWrapIter` is typically obtained\n through either [`wrap_iter`] or [`Wrapper::into_wrap_iter`].","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":114},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":14321,"byte_end":14329,"line_start":413,"line_end":413,"column_start":12,"column_end":20},"name":"WrapIter","qualname":"::WrapIter","value":"WrapIter {  }","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119}],"decl_id":null,"docs":" An iterator over the lines of the input string which borrows a\n `Wrapper`. An instance of `WrapIter` is typically obtained\n through the [`Wrapper::wrap_iter`] method.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":74},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":22282,"byte_end":22286,"line_start":630,"line_end":630,"column_start":8,"column_end":12},"name":"fill","qualname":"::fill","value":"fn (s: &str, width: usize) -> String","parent":null,"children":[],"decl_id":null,"docs":" Fill a line of text at `width` characters. Strings are wrapped\n based on their displayed width, not their size in bytes.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":75},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":23309,"byte_end":23313,"line_start":662,"line_end":662,"column_start":8,"column_end":12},"name":"wrap","qualname":"::wrap","value":"fn (s: &str, width: usize) -> Vec<Cow<str>>","parent":null,"children":[],"decl_id":null,"docs":" Wrap a line of text at `width` characters. Strings are wrapped\n based on their displayed width, not their size in bytes.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":76},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":24736,"byte_end":24745,"line_start":698,"line_end":698,"column_start":8,"column_end":17},"name":"wrap_iter","qualname":"::wrap_iter","value":"fn (s: &str, width: usize) -> IntoWrapIter<HyphenSplitter>","parent":null,"children":[],"decl_id":null,"docs":" Lazily wrap a line of text at `width` characters. Strings are\n wrapped based on their displayed width, not their size in bytes.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/splitting.rs","byte_start":43093,"byte_end":43106,"line_start":63,"line_end":63,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":30}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/splitting.rs","byte_start":43804,"byte_end":43818,"line_start":84,"line_end":84,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":33}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":3410,"byte_end":3417,"line_start":101,"line_end":101,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":4645,"byte_end":4652,"line_start":133,"line_end":133,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":53}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":13748,"byte_end":13760,"line_start":396,"line_end":396,"column_start":40,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":14478,"byte_end":14486,"line_start":418,"line_end":418,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":15567,"byte_end":15579,"line_start":455,"line_end":455,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/splitting.rs","byte_start":43093,"byte_end":43106,"line_start":63,"line_end":63,"column_start":23,"column_end":36},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":77},"to":{"krate":0,"index":26}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/splitting.rs","byte_start":43804,"byte_end":43818,"line_start":84,"line_end":84,"column_start":23,"column_end":37},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":83},"to":{"krate":0,"index":26}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":3410,"byte_end":3417,"line_start":101,"line_end":101,"column_start":10,"column_end":17},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":89},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":4645,"byte_end":4652,"line_start":133,"line_end":133,"column_start":27,"column_end":34},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":89},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":13748,"byte_end":13760,"line_start":396,"line_end":396,"column_start":40,"column_end":52},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":105},"to":{"krate":2,"index":3496}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":14478,"byte_end":14486,"line_start":418,"line_end":418,"column_start":48,"column_end":56},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":114},"to":{"krate":2,"index":3496}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.11.0/src/lib.rs","byte_start":15567,"byte_end":15579,"line_start":455,"line_end":455,"column_start":10,"column_end":22},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":125},"to":{"krate":4294967295,"index":4294967295}}]}