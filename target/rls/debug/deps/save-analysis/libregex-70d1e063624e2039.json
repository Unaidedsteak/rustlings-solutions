{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6","program":"/home/zyphen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","regex","/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"use_std\"","-C","metadata=70d1e063624e2039","-C","extra-filename=-70d1e063624e2039","--out-dir","/home/zyphen/Projects/rustlings/rustlings/target/rls/debug/deps","-L","dependency=/home/zyphen/Projects/rustlings/rustlings/target/rls/debug/deps","--extern","aho_corasick=/home/zyphen/Projects/rustlings/rustlings/target/rls/debug/deps/libaho_corasick-29d5c7ad9299918b.rmeta","--extern","memchr=/home/zyphen/Projects/rustlings/rustlings/target/rls/debug/deps/libmemchr-26ad71fecfc71ec2.rmeta","--extern","regex_syntax=/home/zyphen/Projects/rustlings/rustlings/target/rls/debug/deps/libregex_syntax-001a1afbe4f3f76f.rmeta","--extern","thread_local=/home/zyphen/Projects/rustlings/rustlings/target/rls/debug/deps/libthread_local-e8d19a7e9ee0b2ca.rmeta","--extern","utf8_ranges=/home/zyphen/Projects/rustlings/rustlings/target/rls/debug/deps/libutf8_ranges-79b66a511e662234.rmeta","--cap-lints","allow","--cfg","regex_runtime_teddy_ssse3","--cfg","regex_runtime_teddy_avx2","--error-format=json","--sysroot","/home/zyphen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/zyphen/Projects/rustlings/rustlings/target/rls/debug/deps/libregex-70d1e063624e2039.rmeta"},"prelude":{"crate_id":{"name":"regex","disambiguator":[15870810830020638875,6380701822899388159]},"crate_root":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src","external_crates":[{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[4418738106075590160,6298063093324017560]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[9113878364975505769,4626460723841361367]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10636203250160794641,6979396832464280682]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7259142600435629501,12221323364939802703]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[245280942947536957,12219005383890086938]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6161946279237914842,16521306710208745576]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[6542909105960794691,9677219093962929367]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5468829561226316808,7834745881253856659]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17700629721805382410,8884445337419759755]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5673318663856259921,7992701887106127366]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":11,"id":{"name":"backtrace","disambiguator":[14096840682646779984,4894716104918169263]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[17167590092810160364,15681868143498786567]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":13,"id":{"name":"backtrace_sys","disambiguator":[9809686796458150241,12960706147778414440]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[14218938340851961837,11099897245983054425]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":15,"id":{"name":"aho_corasick","disambiguator":[16703029102293166599,13158100025849798750]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[9342670513648813069,3750994387268093046]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":17,"id":{"name":"thread_local","disambiguator":[14785070705165542002,4593560350299898753]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":18,"id":{"name":"lazy_static","disambiguator":[4337567284459486451,5367878717040293206]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":19,"id":{"name":"regex_syntax","disambiguator":[14422450225815128480,1906721451878714975]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":20,"id":{"name":"ucd_util","disambiguator":[7463920996532416753,18068394868676970920]}},{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":21,"id":{"name":"utf8_ranges","disambiguator":[961650019666518696,3709392958304194869]}}],"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":472,"byte_end":23430,"line_start":11,"line_end":683,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1729},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":18630,"byte_end":18635,"line_start":537,"line_end":537,"column_start":16,"column_end":21},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":18694,"byte_end":18695,"line_start":539,"line_end":539,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":18694,"byte_end":18695,"line_start":539,"line_end":539,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":18694,"byte_end":18695,"line_start":539,"line_end":539,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2519},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":18899,"byte_end":18904,"line_start":547,"line_end":547,"column_start":5,"column_end":10},"alias_span":null,"name":"Regex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2499},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":18906,"byte_end":18911,"line_start":547,"line_end":547,"column_start":12,"column_end":17},"alias_span":null,"name":"Match","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1297},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":18913,"byte_end":18921,"line_start":547,"line_end":547,"column_start":19,"column_end":27},"alias_span":null,"name":"Captures","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1261},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":18927,"byte_end":18939,"line_start":548,"line_end":548,"column_start":5,"column_end":17},"alias_span":null,"name":"CaptureNames","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1363},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":18941,"byte_end":18948,"line_start":548,"line_end":548,"column_start":19,"column_end":26},"alias_span":null,"name":"Matches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1352},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":18950,"byte_end":18964,"line_start":548,"line_end":548,"column_start":28,"column_end":42},"alias_span":null,"name":"CaptureMatches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1340},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":18966,"byte_end":18983,"line_start":548,"line_end":548,"column_start":44,"column_end":61},"alias_span":null,"name":"SubCaptureMatches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2524},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":18989,"byte_end":19005,"line_start":549,"line_end":549,"column_start":5,"column_end":21},"alias_span":null,"name":"CaptureLocations","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1292},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":19007,"byte_end":19016,"line_start":549,"line_end":549,"column_start":23,"column_end":32},"alias_span":null,"name":"Locations","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1374},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":19022,"byte_end":19030,"line_start":550,"line_end":550,"column_start":5,"column_end":13},"alias_span":null,"name":"Replacer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2531},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":19032,"byte_end":19043,"line_start":550,"line_end":550,"column_start":15,"column_end":26},"alias_span":null,"name":"ReplacerRef","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1393},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":19045,"byte_end":19053,"line_start":550,"line_end":550,"column_start":28,"column_end":36},"alias_span":null,"name":"NoExpand","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1272},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":19055,"byte_end":19060,"line_start":550,"line_end":550,"column_start":38,"column_end":43},"alias_span":null,"name":"Split","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1282},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":19062,"byte_end":19068,"line_start":550,"line_end":550,"column_start":45,"column_end":51},"alias_span":null,"name":"SplitN","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1193},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":19074,"byte_end":19080,"line_start":551,"line_end":551,"column_start":5,"column_end":11},"alias_span":null,"name":"escape","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":18694,"byte_end":18695,"line_start":539,"line_end":539,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":37}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":18694,"byte_end":18695,"line_start":539,"line_end":539,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":37}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":18694,"byte_end":18695,"line_start":539,"line_end":539,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":37}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":18694,"byte_end":18695,"line_start":539,"line_end":539,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":37}},{"kind":"Use","ref_id":{"krate":0,"index":110},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":23230,"byte_end":23238,"line_start":678,"line_end":678,"column_start":22,"column_end":30},"alias_span":null,"name":"Compiler","value":"","parent":{"krate":0,"index":1475}},{"kind":"Use","ref_id":{"krate":0,"index":378},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":23259,"byte_end":23263,"line_start":679,"line_end":679,"column_start":20,"column_end":24},"alias_span":null,"name":"Exec","value":"","parent":{"krate":0,"index":1475}},{"kind":"Use","ref_id":{"krate":0,"index":385},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":23265,"byte_end":23276,"line_start":679,"line_end":679,"column_start":26,"column_end":37},"alias_span":null,"name":"ExecBuilder","value":"","parent":{"krate":0,"index":1475}},{"kind":"Use","ref_id":{"krate":0,"index":1891},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":23299,"byte_end":23303,"line_start":680,"line_end":680,"column_start":21,"column_end":25},"alias_span":null,"name":"Char","value":"","parent":{"krate":0,"index":1475}},{"kind":"Use","ref_id":{"krate":0,"index":543},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":23305,"byte_end":23310,"line_start":680,"line_end":680,"column_start":27,"column_end":32},"alias_span":null,"name":"Input","value":"","parent":{"krate":0,"index":1475}},{"kind":"Use","ref_id":{"krate":0,"index":1867},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":23312,"byte_end":23321,"line_start":680,"line_end":680,"column_start":34,"column_end":43},"alias_span":null,"name":"CharInput","value":"","parent":{"krate":0,"index":1475}},{"kind":"Use","ref_id":{"krate":0,"index":1857},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":23323,"byte_end":23330,"line_start":680,"line_end":680,"column_start":45,"column_end":52},"alias_span":null,"name":"InputAt","value":"","parent":{"krate":0,"index":1475}},{"kind":"Use","ref_id":{"krate":0,"index":1983},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":23354,"byte_end":23369,"line_start":681,"line_end":681,"column_start":22,"column_end":37},"alias_span":null,"name":"LiteralSearcher","value":"","parent":{"krate":0,"index":1475}},{"kind":"Use","ref_id":{"krate":0,"index":2084},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":23390,"byte_end":23397,"line_start":682,"line_end":682,"column_start":20,"column_end":27},"alias_span":null,"name":"Program","value":"","parent":{"krate":0,"index":1475}},{"kind":"Use","ref_id":{"krate":0,"index":2102},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":23399,"byte_end":23403,"line_start":682,"line_end":682,"column_start":29,"column_end":33},"alias_span":null,"name":"Inst","value":"","parent":{"krate":0,"index":1475}},{"kind":"Use","ref_id":{"krate":0,"index":2149},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":23405,"byte_end":23414,"line_start":682,"line_end":682,"column_start":35,"column_end":44},"alias_span":null,"name":"EmptyLook","value":"","parent":{"krate":0,"index":1475}},{"kind":"Use","ref_id":{"krate":0,"index":2182},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":23416,"byte_end":23426,"line_start":682,"line_end":682,"column_start":46,"column_end":56},"alias_span":null,"name":"InstRanges","value":"","parent":{"krate":0,"index":1475}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":472,"byte_end":23430,"line_start":11,"line_end":683,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":37},{"krate":0,"index":42},{"krate":0,"index":71},{"krate":0,"index":84},{"krate":0,"index":204},{"krate":0,"index":337},{"krate":0,"index":347},{"krate":0,"index":497},{"krate":0,"index":519},{"krate":0,"index":522},{"krate":0,"index":623},{"krate":0,"index":811},{"krate":0,"index":839},{"krate":0,"index":883},{"krate":0,"index":888},{"krate":0,"index":1114},{"krate":0,"index":1116},{"krate":0,"index":1174},{"krate":0,"index":1401},{"krate":0,"index":1420},{"krate":0,"index":1475}],"decl_id":null,"docs":"This crate provides a library for parsing, compiling, and executing regular\nexpressions. Its syntax is similar to Perl-style regular expressions, but lacks\na few features like look around and backreferences. In exchange, all searches\nexecute in linear time with respect to the size of the regular expression and\nsearch text.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":18173,"byte_end":18195,"line_start":520,"line_end":520,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":37},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":22507,"byte_end":22512,"line_start":642,"line_end":642,"column_start":9,"column_end":14},"name":"bytes","qualname":"::bytes","value":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41}],"decl_id":null,"docs":"Match regular expressions on arbitrary bytes.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":22471,"byte_end":22498,"line_start":641,"line_end":641,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":110},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":44324,"byte_end":44332,"line_start":37,"line_end":37,"column_start":12,"column_end":20},"name":"Compiler","qualname":"::compile::Compiler","value":"Compiler {  }","parent":null,"children":[{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118}],"decl_id":null,"docs":" A compiler translates a regular expression AST to a sequence of\n instructions. The sequence of instructions represents an NFA.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":44743,"byte_end":44746,"line_start":52,"line_end":52,"column_start":12,"column_end":15},"name":"new","qualname":"<Compiler>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new regular expression compiler.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":45341,"byte_end":45351,"line_start":68,"line_end":68,"column_start":12,"column_end":22},"name":"size_limit","qualname":"<Compiler>::size_limit","value":"fn (mut self, size_limit: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The size of the resulting program is limited by size_limit. If\n the program approximately exceeds the given size (in bytes), then\n compilation will stop and return an error.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":46096,"byte_end":46101,"line_start":84,"line_end":84,"column_start":12,"column_end":17},"name":"bytes","qualname":"<Compiler>::bytes","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" If bytes is true, then the program is compiled as a byte based\n automaton, which incorporates UTF-8 decoding into the machine. If it's\n false, then the automaton is Unicode scalar value based, e.g., an\n engine utilizing such an automaton is responsible for UTF-8 decoding.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":46384,"byte_end":46393,"line_start":93,"line_end":93,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<Compiler>::only_utf8","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When disabled, the program compiled may match arbitrary bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":46876,"byte_end":46879,"line_start":105,"line_end":105,"column_start":12,"column_end":15},"name":"dfa","qualname":"<Compiler>::dfa","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When set, the machine returned is suitable for use in the DFA matching\n engine.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":47114,"byte_end":47121,"line_start":112,"line_end":112,"column_start":12,"column_end":19},"name":"reverse","qualname":"<Compiler>::reverse","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When set, the machine returned is suitable for matching text in\n reverse. In particular, all concatenations are flipped.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":47475,"byte_end":47482,"line_start":122,"line_end":122,"column_start":12,"column_end":19},"name":"compile","qualname":"<Compiler>::compile","value":"fn (mut self, exprs: &[Hir]) -> result::Result<Program, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compile a regular expression given its AST.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1730},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/error.rs","byte_start":159496,"byte_end":159502,"line_start":18,"line_end":18,"column_start":5,"column_end":11},"name":"Syntax","qualname":"::error::Error::Syntax","value":"Error::Syntax(String)","parent":{"krate":0,"index":1729},"children":[],"decl_id":null,"docs":" A syntax error.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1733},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/error.rs","byte_start":159622,"byte_end":159636,"line_start":21,"line_end":21,"column_start":5,"column_end":19},"name":"CompiledTooBig","qualname":"::error::Error::CompiledTooBig","value":"Error::CompiledTooBig(usize)","parent":{"krate":0,"index":1729},"children":[],"decl_id":null,"docs":" The compiled program exceeded the set size limit.\n The argument is the size limit imposed.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1736},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/error.rs","byte_start":159923,"byte_end":159938,"line_start":28,"line_end":28,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::error::Error::__Nonexhaustive","value":"Error::__Nonexhaustive","parent":{"krate":0,"index":1729},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1729},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/error.rs","byte_start":159460,"byte_end":159465,"line_start":16,"line_end":16,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"Error::{Syntax, CompiledTooBig, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":1730},{"krate":0,"index":1733},{"krate":0,"index":1736}],"decl_id":null,"docs":" An error that occurred during parsing or compiling a regular expression.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":378},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":162995,"byte_end":162999,"line_start":41,"line_end":41,"column_start":12,"column_end":16},"name":"Exec","qualname":"::exec::Exec","value":"Exec {  }","parent":null,"children":[{"krate":0,"index":379},{"krate":0,"index":380}],"decl_id":null,"docs":" `Exec` manages the execution of a regular expression.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1743},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":163370,"byte_end":163380,"line_start":52,"line_end":52,"column_start":12,"column_end":22},"name":"ExecNoSync","qualname":"::exec::ExecNoSync","value":"ExecNoSync {  }","parent":null,"children":[{"krate":0,"index":1745},{"krate":0,"index":1746}],"decl_id":null,"docs":" `ExecNoSync` is like `Exec`, except it embeds a reference to a cache. This\n means it is no longer Sync, but we can now avoid the overhead of\n synchronization to fetch the cache.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":381},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":163619,"byte_end":163632,"line_start":60,"line_end":60,"column_start":12,"column_end":25},"name":"ExecNoSyncStr","qualname":"::exec::ExecNoSyncStr","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ExecNoSyncStr` is like `ExecNoSync`, but matches on &str instead of &[u8].\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":385},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":165869,"byte_end":165880,"line_start":107,"line_end":107,"column_start":12,"column_end":23},"name":"ExecBuilder","qualname":"::exec::ExecBuilder","value":"ExecBuilder {  }","parent":null,"children":[{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":389}],"decl_id":null,"docs":" Facilitates the construction of an executor by exposing various knobs\n to control how a regex is executed and what kinds of resources it's\n permitted to use.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":166481,"byte_end":166484,"line_start":129,"line_end":129,"column_start":12,"column_end":15},"name":"new","qualname":"<ExecBuilder>::new","value":"fn (re: &str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a regex execution builder.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":166810,"byte_end":166818,"line_start":138,"line_end":138,"column_start":12,"column_end":20},"name":"new_many","qualname":"<ExecBuilder>::new_many","value":"fn <I, S> (res: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Like new, but compiles the union of the given regular expressions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":167118,"byte_end":167129,"line_start":146,"line_end":146,"column_start":12,"column_end":23},"name":"new_options","qualname":"<ExecBuilder>::new_options","value":"fn (opts: RegexOptions) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a regex execution builder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":167627,"byte_end":167636,"line_start":162,"line_end":162,"column_start":12,"column_end":21},"name":"automatic","qualname":"<ExecBuilder>::automatic","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the matching engine to be automatically determined.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":167951,"byte_end":167954,"line_start":172,"line_end":172,"column_start":12,"column_end":15},"name":"nfa","qualname":"<ExecBuilder>::nfa","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the matching engine to use the NFA algorithm no matter what\n optimizations are possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":168445,"byte_end":168465,"line_start":185,"line_end":185,"column_start":12,"column_end":32},"name":"bounded_backtracking","qualname":"<ExecBuilder>::bounded_backtracking","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the matching engine to use a bounded backtracking engine no\n matter what optimizations are possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":169033,"byte_end":169038,"line_start":199,"line_end":199,"column_start":12,"column_end":17},"name":"bytes","qualname":"<ExecBuilder>::bytes","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Compiles byte based programs for use with the NFA matching engines.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":169309,"byte_end":169318,"line_start":208,"line_end":208,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<ExecBuilder>::only_utf8","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When disabled, the program compiled may match arbitrary bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":169441,"byte_end":169448,"line_start":214,"line_end":214,"column_start":12,"column_end":19},"name":"unicode","qualname":"<ExecBuilder>::unicode","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the Unicode flag.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":172557,"byte_end":172562,"line_start":290,"line_end":290,"column_start":12,"column_end":17},"name":"build","qualname":"<ExecBuilder>::build","value":"fn (self) -> Result<Exec, Error>","parent":null,"children":[],"decl_id":null,"docs":" Build an executor that can run a regular expression.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":199023,"byte_end":199038,"line_start":1062,"line_end":1062,"column_start":12,"column_end":27},"name":"many_matches_at","qualname":"<ExecNoSync>::many_matches_at","value":"fn (&self, matches: &mut [bool], text: &[u8], start: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Finds which regular expressions match the given text.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":200887,"byte_end":200903,"line_start":1120,"line_end":1120,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<ExecNoSync>::capture_name_idx","value":"fn (&self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":201032,"byte_end":201048,"line_start":1126,"line_end":1126,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<ExecNoSyncStr>::capture_name_idx","value":"fn (&self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":201247,"byte_end":201255,"line_start":1134,"line_end":1134,"column_start":12,"column_end":20},"name":"searcher","qualname":"<Exec>::searcher","value":"fn (&self) -> ExecNoSync","parent":null,"children":[],"decl_id":null,"docs":" Get a searcher that isn't Sync.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":201189,"byte_end":201206,"line_start":1133,"line_end":1133,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":201670,"byte_end":201682,"line_start":1146,"line_end":1146,"column_start":12,"column_end":24},"name":"searcher_str","qualname":"<Exec>::searcher_str","value":"fn (&self) -> ExecNoSyncStr","parent":null,"children":[],"decl_id":null,"docs":" Get a searcher that isn't Sync and can match on &str.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":201612,"byte_end":201629,"line_start":1145,"line_end":1145,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":201808,"byte_end":201818,"line_start":1151,"line_end":1151,"column_start":12,"column_end":22},"name":"into_regex","qualname":"<Exec>::into_regex","value":"fn (self) -> re_unicode::Regex","parent":null,"children":[],"decl_id":null,"docs":" Build a Regex from this executor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":201949,"byte_end":201963,"line_start":1156,"line_end":1156,"column_start":12,"column_end":26},"name":"into_regex_set","qualname":"<Exec>::into_regex_set","value":"fn (self) -> re_set::unicode::RegexSet","parent":null,"children":[],"decl_id":null,"docs":" Build a RegexSet from this executor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":202138,"byte_end":202153,"line_start":1161,"line_end":1161,"column_start":12,"column_end":27},"name":"into_byte_regex","qualname":"<Exec>::into_byte_regex","value":"fn (self) -> re_bytes::Regex","parent":null,"children":[],"decl_id":null,"docs":" Build a Regex from this executor that can match arbitrary bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":202311,"byte_end":202330,"line_start":1166,"line_end":1166,"column_start":12,"column_end":31},"name":"into_byte_regex_set","qualname":"<Exec>::into_byte_regex_set","value":"fn (self) -> re_set::bytes::RegexSet","parent":null,"children":[],"decl_id":null,"docs":" Build a RegexSet from this executor that can match arbitrary bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":202517,"byte_end":202530,"line_start":1172,"line_end":1172,"column_start":12,"column_end":25},"name":"regex_strings","qualname":"<Exec>::regex_strings","value":"fn (&self) -> &[String]","parent":null,"children":[],"decl_id":null,"docs":" The original regular expressions given by the caller that were\n compiled.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":202687,"byte_end":202700,"line_start":1179,"line_end":1179,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Exec>::capture_names","value":"fn (&self) -> &[Option<String>]","parent":null,"children":[],"decl_id":null,"docs":" Return a slice of capture names.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":202875,"byte_end":202891,"line_start":1185,"line_end":1185,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<Exec>::capture_name_idx","value":"fn (&self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to named groups mapping (from group name to\n group position).\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1857},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":224347,"byte_end":224354,"line_start":25,"line_end":25,"column_start":12,"column_end":19},"name":"InputAt","qualname":"::input::InputAt","value":"InputAt {  }","parent":null,"children":[{"krate":0,"index":1858},{"krate":0,"index":1859},{"krate":0,"index":1860},{"krate":0,"index":1861}],"decl_id":null,"docs":" Represents a location in the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":224526,"byte_end":224534,"line_start":34,"line_end":34,"column_start":12,"column_end":20},"name":"is_start","qualname":"<InputAt>::is_start","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff this position is at the beginning of the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":224661,"byte_end":224667,"line_start":39,"line_end":39,"column_start":12,"column_end":18},"name":"is_end","qualname":"<InputAt>::is_end","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff this position is past the end of the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":224913,"byte_end":224917,"line_start":47,"line_end":47,"column_start":12,"column_end":16},"name":"char","qualname":"<InputAt>::char","value":"fn (&self) -> Char","parent":null,"children":[],"decl_id":null,"docs":" Returns the character at this position.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":225011,"byte_end":225015,"line_start":52,"line_end":52,"column_start":12,"column_end":16},"name":"byte","qualname":"<InputAt>::byte","value":"fn (&self) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte at this position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":225142,"byte_end":225145,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"len","qualname":"<InputAt>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the UTF-8 width of the character at this position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":225290,"byte_end":225298,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<InputAt>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the UTF-8 width of the character at this position\n is zero.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":225406,"byte_end":225409,"line_start":68,"line_end":68,"column_start":12,"column_end":15},"name":"pos","qualname":"<InputAt>::pos","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte offset of this position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":225530,"byte_end":225538,"line_start":73,"line_end":73,"column_start":12,"column_end":20},"name":"next_pos","qualname":"<InputAt>::next_pos","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte offset of the next position in the input.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":543},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":225664,"byte_end":225669,"line_start":79,"line_end":79,"column_start":11,"column_end":16},"name":"Input","qualname":"::input::Input","value":"Input","parent":null,"children":[{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551}],"decl_id":null,"docs":" An abstraction over input used in the matching engines.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":225742,"byte_end":225744,"line_start":81,"line_end":81,"column_start":8,"column_end":10},"name":"at","qualname":"::input::Input::at","value":"fn (&self, i: usize) -> InputAt","parent":{"krate":0,"index":543},"children":[],"decl_id":null,"docs":" Return an encoding of the position at byte offset `i`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":225921,"byte_end":225930,"line_start":86,"line_end":86,"column_start":8,"column_end":17},"name":"next_char","qualname":"::input::Input::next_char","value":"fn (&self, at: InputAt) -> Char","parent":{"krate":0,"index":543},"children":[],"decl_id":null,"docs":" Return the Unicode character occurring next to `at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":226111,"byte_end":226124,"line_start":91,"line_end":91,"column_start":8,"column_end":21},"name":"previous_char","qualname":"::input::Input::previous_char","value":"fn (&self, at: InputAt) -> Char","parent":{"krate":0,"index":543},"children":[],"decl_id":null,"docs":" Return the Unicode character occurring previous to `at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":226264,"byte_end":226278,"line_start":95,"line_end":95,"column_start":8,"column_end":22},"name":"is_empty_match","qualname":"::input::Input::is_empty_match","value":"fn (&self, at: InputAt, empty: &InstEmptyLook) -> bool","parent":{"krate":0,"index":543},"children":[],"decl_id":null,"docs":" Return true if the given empty width instruction matches at the\n input position given.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":226385,"byte_end":226394,"line_start":98,"line_end":98,"column_start":8,"column_end":17},"name":"prefix_at","qualname":"::input::Input::prefix_at","value":"fn (&self, prefixes: &LiteralSearcher, at: InputAt) -> Option<InputAt>","parent":{"krate":0,"index":543},"children":[],"decl_id":null,"docs":" Scan the input for a matching prefix.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":226544,"byte_end":226547,"line_start":105,"line_end":105,"column_start":8,"column_end":11},"name":"len","qualname":"::input::Input::len","value":"fn (&self) -> usize","parent":{"krate":0,"index":543},"children":[],"decl_id":null,"docs":" The number of bytes in the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":226609,"byte_end":226617,"line_start":108,"line_end":108,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::input::Input::is_empty","value":"fn (&self) -> bool","parent":{"krate":0,"index":543},"children":[],"decl_id":null,"docs":" Whether the input is empty.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":551},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":226716,"byte_end":226724,"line_start":111,"line_end":111,"column_start":8,"column_end":16},"name":"as_bytes","qualname":"::input::Input::as_bytes","value":"fn (&self) -> &[u8]","parent":{"krate":0,"index":543},"children":[],"decl_id":null,"docs":" Return the given input as a sequence of bytes.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1867},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":227468,"byte_end":227477,"line_start":140,"line_end":140,"column_start":12,"column_end":21},"name":"CharInput","qualname":"::input::CharInput","value":"","parent":null,"children":[],"decl_id":null,"docs":" An input reader over characters.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":564},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":227596,"byte_end":227599,"line_start":144,"line_end":144,"column_start":12,"column_end":15},"name":"new","qualname":"<CharInput>::new","value":"fn (s: &'t [u8]) -> CharInput<'t>","parent":null,"children":[],"decl_id":null,"docs":" Return a new character input reader for the given string.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1891},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":233541,"byte_end":233545,"line_start":346,"line_end":346,"column_start":12,"column_end":16},"name":"Char","qualname":"::input::Char","value":"","parent":null,"children":[],"decl_id":null,"docs":" An inline representation of `Option<char>`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":233869,"byte_end":233876,"line_start":360,"line_end":360,"column_start":12,"column_end":19},"name":"is_none","qualname":"<Char>::is_none","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the character is absent.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":233848,"byte_end":233857,"line_start":359,"line_end":359,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":234068,"byte_end":234076,"line_start":366,"line_end":366,"column_start":12,"column_end":20},"name":"len_utf8","qualname":"<Char>::len_utf8","value":"fn (self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the character's UTF-8 encoding.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":234047,"byte_end":234056,"line_start":365,"line_end":365,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":234299,"byte_end":234311,"line_start":373,"line_end":373,"column_start":12,"column_end":24},"name":"is_word_char","qualname":"<Char>::is_word_char","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the character is a word character.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":609},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":234531,"byte_end":234543,"line_start":380,"line_end":380,"column_start":12,"column_end":24},"name":"is_word_byte","qualname":"<Char>::is_word_byte","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the byte is a word byte.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1983},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":236562,"byte_end":236577,"line_start":31,"line_end":31,"column_start":12,"column_end":27},"name":"LiteralSearcher","qualname":"::literal::LiteralSearcher","value":"LiteralSearcher {  }","parent":null,"children":[{"krate":0,"index":1984},{"krate":0,"index":1985},{"krate":0,"index":1986},{"krate":0,"index":1987}],"decl_id":null,"docs":" A prefix extracted from a compiled regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":237537,"byte_end":237542,"line_start":60,"line_end":60,"column_start":12,"column_end":17},"name":"empty","qualname":"<LiteralSearcher>::empty","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher that never matches and never advances the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":723},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":237693,"byte_end":237701,"line_start":65,"line_end":65,"column_start":12,"column_end":20},"name":"prefixes","qualname":"<LiteralSearcher>::prefixes","value":"fn (lits: Literals) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for literal prefixes from the given set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":724},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":237894,"byte_end":237902,"line_start":71,"line_end":71,"column_start":12,"column_end":20},"name":"suffixes","qualname":"<LiteralSearcher>::suffixes","value":"fn (lits: Literals) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for literal suffixes from the given set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":726},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":238763,"byte_end":238771,"line_start":92,"line_end":92,"column_start":12,"column_end":20},"name":"complete","qualname":"<LiteralSearcher>::complete","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all matches comprise the entire regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":727},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":238967,"byte_end":238971,"line_start":98,"line_end":98,"column_start":12,"column_end":16},"name":"find","qualname":"<LiteralSearcher>::find","value":"fn (&self, haystack: &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Find the position of a literal in `haystack` if it exists.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":238909,"byte_end":238926,"line_start":97,"line_end":97,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":735},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":239698,"byte_end":239708,"line_start":114,"line_end":114,"column_start":12,"column_end":22},"name":"find_start","qualname":"<LiteralSearcher>::find_start","value":"fn (&self, haystack: &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Like find, except matches must start at index `0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":736},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":240096,"byte_end":240104,"line_start":127,"line_end":127,"column_start":12,"column_end":20},"name":"find_end","qualname":"<LiteralSearcher>::find_end","value":"fn (&self, haystack: &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Like find, except matches must end at index `haystack.len()`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":737},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":240529,"byte_end":240533,"line_start":140,"line_end":140,"column_start":12,"column_end":16},"name":"iter","qualname":"<LiteralSearcher>::iter","value":"fn (&self) -> LiteralIter","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all literals to be matched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":738},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":241255,"byte_end":241258,"line_start":157,"line_end":157,"column_start":12,"column_end":15},"name":"lcp","qualname":"<LiteralSearcher>::lcp","value":"fn (&self) -> &FreqyPacked","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for the longest common prefix of this matcher.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":739},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":241393,"byte_end":241396,"line_start":162,"line_end":162,"column_start":12,"column_end":15},"name":"lcs","qualname":"<LiteralSearcher>::lcs","value":"fn (&self) -> &FreqyPacked","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for the longest common suffix of this matcher.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":740},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":241505,"byte_end":241513,"line_start":167,"line_end":167,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<LiteralSearcher>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff this prefix is empty.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":741},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":241629,"byte_end":241632,"line_start":172,"line_end":172,"column_start":12,"column_end":15},"name":"len","qualname":"<LiteralSearcher>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of prefixes in this machine.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":743},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":242084,"byte_end":242100,"line_start":186,"line_end":186,"column_start":12,"column_end":28},"name":"approximate_size","qualname":"<LiteralSearcher>::approximate_size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the approximate heap usage of literals in bytes.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":753},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":245498,"byte_end":245503,"line_start":272,"line_end":272,"column_start":5,"column_end":10},"name":"Empty","qualname":"::literal::LiteralIter::Empty","value":"LiteralIter::Empty","parent":{"krate":0,"index":751},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":755},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":245509,"byte_end":245514,"line_start":273,"line_end":273,"column_start":5,"column_end":10},"name":"Bytes","qualname":"::literal::LiteralIter::Bytes","value":"LiteralIter::Bytes(&'a [u8])","parent":{"krate":0,"index":751},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":758},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":245530,"byte_end":245536,"line_start":274,"line_end":274,"column_start":5,"column_end":11},"name":"Single","qualname":"::literal::LiteralIter::Single","value":"LiteralIter::Single(&'a [u8])","parent":{"krate":0,"index":751},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":761},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":245552,"byte_end":245554,"line_start":275,"line_end":275,"column_start":5,"column_end":7},"name":"AC","qualname":"::literal::LiteralIter::AC","value":"LiteralIter::AC(&'a [Literal])","parent":{"krate":0,"index":751},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":764},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":245575,"byte_end":245585,"line_start":276,"line_end":276,"column_start":5,"column_end":15},"name":"TeddySSSE3","qualname":"::literal::LiteralIter::TeddySSSE3","value":"LiteralIter::TeddySSSE3(&'a [Vec<u8>])","parent":{"krate":0,"index":751},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":767},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":245606,"byte_end":245615,"line_start":277,"line_end":277,"column_start":5,"column_end":14},"name":"TeddyAVX2","qualname":"::literal::LiteralIter::TeddyAVX2","value":"LiteralIter::TeddyAVX2(&'a [Vec<u8>])","parent":{"krate":0,"index":751},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":751},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":245476,"byte_end":245487,"line_start":271,"line_end":271,"column_start":10,"column_end":21},"name":"LiteralIter","qualname":"::literal::LiteralIter","value":"LiteralIter::{Empty, Bytes, Single, AC, TeddySSSE3, TeddyAVX2}","parent":null,"children":[{"krate":0,"index":753},{"krate":0,"index":755},{"krate":0,"index":758},{"krate":0,"index":761},{"krate":0,"index":764},{"krate":0,"index":767}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2026},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":250215,"byte_end":250226,"line_start":426,"line_end":426,"column_start":12,"column_end":23},"name":"FreqyPacked","qualname":"::literal::FreqyPacked","value":"FreqyPacked {  }","parent":null,"children":[{"krate":0,"index":2027},{"krate":0,"index":2028},{"krate":0,"index":2029},{"krate":0,"index":2030},{"krate":0,"index":2031},{"krate":0,"index":2032}],"decl_id":null,"docs":" Provides an implementation of fast subtring search using frequency\n analysis.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":786},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":252669,"byte_end":252673,"line_start":502,"line_end":502,"column_start":12,"column_end":16},"name":"find","qualname":"<FreqyPacked>::find","value":"fn (&self, haystack: &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":252611,"byte_end":252628,"line_start":501,"line_end":501,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":787},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":253501,"byte_end":253510,"line_start":528,"line_end":528,"column_start":12,"column_end":21},"name":"is_suffix","qualname":"<FreqyPacked>::is_suffix","value":"fn (&self, text: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":253443,"byte_end":253460,"line_start":527,"line_end":527,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":788},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":253685,"byte_end":253688,"line_start":535,"line_end":535,"column_start":12,"column_end":15},"name":"len","qualname":"<FreqyPacked>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":789},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":253748,"byte_end":253756,"line_start":539,"line_end":539,"column_start":12,"column_end":20},"name":"char_len","qualname":"<FreqyPacked>::char_len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2084},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":338271,"byte_end":338278,"line_start":18,"line_end":18,"column_start":12,"column_end":19},"name":"Program","qualname":"::prog::Program","value":"Program { insts, matches, captures, capture_name_idx, start, byte_classes, only_utf8, is_bytes, is_dfa, is_reverse, is_anchored_start, is_anchored_end, has_unicode_word_boundary, prefixes, dfa_size_limit }","parent":null,"children":[{"krate":0,"index":2085},{"krate":0,"index":2086},{"krate":0,"index":2087},{"krate":0,"index":2088},{"krate":0,"index":2089},{"krate":0,"index":2090},{"krate":0,"index":2091},{"krate":0,"index":2092},{"krate":0,"index":2093},{"krate":0,"index":2094},{"krate":0,"index":2095},{"krate":0,"index":2096},{"krate":0,"index":2097},{"krate":0,"index":2098},{"krate":0,"index":2099}],"decl_id":null,"docs":" Program is a sequence of instructions and various facts about thos\n instructions.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2085},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":338348,"byte_end":338353,"line_start":20,"line_end":20,"column_start":9,"column_end":14},"name":"insts","qualname":"::prog::Program::insts","value":"std::vec::Vec<prog::Inst>","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":" A sequence of instructions that represents an NFA.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2086},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":338518,"byte_end":338525,"line_start":24,"line_end":24,"column_start":9,"column_end":16},"name":"matches","qualname":"::prog::Program::matches","value":"std::vec::Vec<usize>","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":" Pointers to each Match instruction in the sequence.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2087},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":338659,"byte_end":338667,"line_start":27,"line_end":27,"column_start":9,"column_end":17},"name":"captures","qualname":"::prog::Program::captures","value":"std::vec::Vec<std::option::Option<std::string::String>>","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":" The ordered sequence of all capture groups extracted from the AST.\n Unnamed groups are `None`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2088},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":338760,"byte_end":338776,"line_start":29,"line_end":29,"column_start":9,"column_end":25},"name":"capture_name_idx","qualname":"::prog::Program::capture_name_idx","value":"std::sync::Arc<std::collections::HashMap<std::string::String, usize>>","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":" Pointers to all named capture groups into `captures`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2089},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":339133,"byte_end":339138,"line_start":35,"line_end":35,"column_start":9,"column_end":14},"name":"start","qualname":"::prog::Program::start","value":"usize","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":" A pointer to the start instruction. This can vary depending on how\n the program was compiled. For example, programs for use with the DFA\n engine have a `.*?` inserted at the beginning of unanchored regular\n expressions. The actual starting point of the program is after the\n `.*?`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2090},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":339252,"byte_end":339264,"line_start":38,"line_end":38,"column_start":9,"column_end":21},"name":"byte_classes","qualname":"::prog::Program::byte_classes","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":" A set of equivalence classes for discriminating bytes in the compiled\n program.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2091},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":339343,"byte_end":339352,"line_start":40,"line_end":40,"column_start":9,"column_end":18},"name":"only_utf8","qualname":"::prog::Program::only_utf8","value":"bool","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":" When true, this program can only match valid UTF-8.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2092},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":339476,"byte_end":339484,"line_start":43,"line_end":43,"column_start":9,"column_end":17},"name":"is_bytes","qualname":"::prog::Program::is_bytes","value":"bool","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":" When true, this program uses byte range instructions instead of Unicode\n range instructions.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2093},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":339673,"byte_end":339679,"line_start":47,"line_end":47,"column_start":9,"column_end":15},"name":"is_dfa","qualname":"::prog::Program::is_dfa","value":"bool","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":" When true, the program is compiled for DFA matching. For example, this\n implies `is_bytes` and also inserts a preceding `.*?` for unanchored\n regexes.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2094},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":339785,"byte_end":339795,"line_start":50,"line_end":50,"column_start":9,"column_end":19},"name":"is_reverse","qualname":"::prog::Program::is_reverse","value":"bool","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":" When true, the program matches text in reverse (for use only in the\n DFA).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2095},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":339877,"byte_end":339894,"line_start":52,"line_end":52,"column_start":9,"column_end":26},"name":"is_anchored_start","qualname":"::prog::Program::is_anchored_start","value":"bool","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":" Whether the regex must match from the start of the input.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2096},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":339972,"byte_end":339987,"line_start":54,"line_end":54,"column_start":9,"column_end":24},"name":"is_anchored_end","qualname":"::prog::Program::is_anchored_end","value":"bool","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":" Whether the regex must match at the end of the input.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2097},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":340078,"byte_end":340103,"line_start":56,"line_end":56,"column_start":9,"column_end":34},"name":"has_unicode_word_boundary","qualname":"::prog::Program::has_unicode_word_boundary","value":"bool","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":" Whether this program contains a Unicode word boundary instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2098},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":340195,"byte_end":340203,"line_start":58,"line_end":58,"column_start":9,"column_end":17},"name":"prefixes","qualname":"::prog::Program::prefixes","value":"literal::LiteralSearcher","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":" A possibly empty machine for very quickly matching prefix literals.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2099},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":341030,"byte_end":341044,"line_start":74,"line_end":74,"column_start":9,"column_end":23},"name":"dfa_size_limit","qualname":"::prog::Program::dfa_size_limit","value":"usize","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":" A limit on the size of the cache that the DFA is allowed to use while\n matching.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":851},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":341170,"byte_end":341173,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"name":"new","qualname":"<Program>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty instruction sequence. Fields are given default\n values.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":852},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":341888,"byte_end":341892,"line_start":102,"line_end":102,"column_start":12,"column_end":16},"name":"skip","qualname":"<Program>::skip","value":"fn (&self, mut pc: usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" If pc is an index to a no-op instruction (like Save), then return the\n next pc that is not a no-op instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":853},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":342206,"byte_end":342220,"line_start":113,"line_end":113,"column_start":12,"column_end":26},"name":"leads_to_match","qualname":"<Program>::leads_to_match","value":"fn (&self, pc: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if an execution engine at instruction `pc` will\n always lead to a match.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":854},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":342746,"byte_end":342759,"line_start":128,"line_end":128,"column_start":12,"column_end":25},"name":"needs_dotstar","qualname":"<Program>::needs_dotstar","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the current configuration demands that an implicit\n `.*?` be prepended to the instruction sequence.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":855},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":342966,"byte_end":342976,"line_start":134,"line_end":134,"column_start":12,"column_end":22},"name":"uses_bytes","qualname":"<Program>::uses_bytes","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this program uses Byte instructions instead of\n Char/Range instructions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":856},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":343211,"byte_end":343220,"line_start":141,"line_end":141,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<Program>::only_utf8","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this program exclusively matches valid UTF-8 bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":857},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":343368,"byte_end":343384,"line_start":147,"line_end":147,"column_start":12,"column_end":28},"name":"approximate_size","qualname":"<Program>::approximate_size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the approximate heap usage of this instruction sequence in\n bytes.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2103},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":348086,"byte_end":348091,"line_start":267,"line_end":267,"column_start":5,"column_end":10},"name":"Match","qualname":"::prog::Inst::Match","value":"Inst::Match(usize)","parent":{"krate":0,"index":2102},"children":[],"decl_id":null,"docs":" Match indicates that the program has reached a match state.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2106},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":348221,"byte_end":348225,"line_start":270,"line_end":270,"column_start":5,"column_end":9},"name":"Save","qualname":"::prog::Inst::Save","value":"Inst::Save(InstSave)","parent":{"krate":0,"index":2102},"children":[],"decl_id":null,"docs":" Save causes the program to save the current location of the input in\n the slot indicated by InstSave.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2109},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":348360,"byte_end":348365,"line_start":273,"line_end":273,"column_start":5,"column_end":10},"name":"Split","qualname":"::prog::Inst::Split","value":"Inst::Split(InstSplit)","parent":{"krate":0,"index":2102},"children":[],"decl_id":null,"docs":" Split causes the program to diverge to one of two paths in the\n program, preferring goto1 in InstSplit.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2112},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":348525,"byte_end":348534,"line_start":276,"line_end":276,"column_start":5,"column_end":14},"name":"EmptyLook","qualname":"::prog::Inst::EmptyLook","value":"Inst::EmptyLook(InstEmptyLook)","parent":{"krate":0,"index":2102},"children":[],"decl_id":null,"docs":" EmptyLook represents a zero-width assertion in a regex program. A\n zero-width assertion does not consume any of the input text.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2115},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":348676,"byte_end":348680,"line_start":279,"line_end":279,"column_start":5,"column_end":9},"name":"Char","qualname":"::prog::Inst::Char","value":"Inst::Char(InstChar)","parent":{"krate":0,"index":2102},"children":[],"decl_id":null,"docs":" Char requires the regex program to match the character in InstChar at\n the current position in the input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2118},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":348854,"byte_end":348860,"line_start":282,"line_end":282,"column_start":5,"column_end":11},"name":"Ranges","qualname":"::prog::Inst::Ranges","value":"Inst::Ranges(InstRanges)","parent":{"krate":0,"index":2102},"children":[],"decl_id":null,"docs":" Ranges requires the regex program to match the character at the current\n position in the input with one of the ranges specified in InstRanges.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2121},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":349058,"byte_end":349063,"line_start":286,"line_end":286,"column_start":5,"column_end":10},"name":"Bytes","qualname":"::prog::Inst::Bytes","value":"Inst::Bytes(InstBytes)","parent":{"krate":0,"index":2102},"children":[],"decl_id":null,"docs":" Bytes is like Ranges, except it expresses a single byte range. It is\n used in conjunction with Split instructions to implement multi-byte\n character classes.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2102},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":347657,"byte_end":347661,"line_start":259,"line_end":259,"column_start":10,"column_end":14},"name":"Inst","qualname":"::prog::Inst","value":"Inst::{Match, Save, Split, EmptyLook, Char, Ranges, Bytes}","parent":null,"children":[{"krate":0,"index":2103},{"krate":0,"index":2106},{"krate":0,"index":2109},{"krate":0,"index":2112},{"krate":0,"index":2115},{"krate":0,"index":2118},{"krate":0,"index":2121}],"decl_id":null,"docs":" Inst is an instruction code in a Regex program.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":874},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":349167,"byte_end":349175,"line_start":291,"line_end":291,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Inst>::is_match","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this is a match instruction.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2128},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":349373,"byte_end":349381,"line_start":301,"line_end":301,"column_start":12,"column_end":20},"name":"InstSave","qualname":"::prog::InstSave","value":"InstSave { goto, slot }","parent":null,"children":[{"krate":0,"index":2129},{"krate":0,"index":2130}],"decl_id":null,"docs":" Representation of the Save instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2129},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":349445,"byte_end":349449,"line_start":303,"line_end":303,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstSave::goto","value":"usize","parent":{"krate":0,"index":2128},"children":[],"decl_id":null,"docs":" The next location to execute in the program.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2130},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":349604,"byte_end":349608,"line_start":306,"line_end":306,"column_start":9,"column_end":13},"name":"slot","qualname":"::prog::InstSave::slot","value":"usize","parent":{"krate":0,"index":2128},"children":[],"decl_id":null,"docs":" The capture slot (there are two slots for every capture in a regex,\n including the zeroth capture for the entire match).\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2135},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":349700,"byte_end":349709,"line_start":311,"line_end":311,"column_start":12,"column_end":21},"name":"InstSplit","qualname":"::prog::InstSplit","value":"InstSplit { goto1, goto2 }","parent":null,"children":[{"krate":0,"index":2136},{"krate":0,"index":2137}],"decl_id":null,"docs":" Representation of the Split instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2136},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":349865,"byte_end":349870,"line_start":314,"line_end":314,"column_start":9,"column_end":14},"name":"goto1","qualname":"::prog::InstSplit::goto1","value":"usize","parent":{"krate":0,"index":2135},"children":[],"decl_id":null,"docs":" The first instruction to try. A match resulting from following goto1\n has precedence over a match resulting from following goto2.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2137},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":350035,"byte_end":350040,"line_start":317,"line_end":317,"column_start":9,"column_end":14},"name":"goto2","qualname":"::prog::InstSplit::goto2","value":"usize","parent":{"krate":0,"index":2135},"children":[],"decl_id":null,"docs":" The second instruction to try. A match resulting from following goto1\n has precedence over a match resulting from following goto2.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2142},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":350140,"byte_end":350153,"line_start":322,"line_end":322,"column_start":12,"column_end":25},"name":"InstEmptyLook","qualname":"::prog::InstEmptyLook","value":"InstEmptyLook { goto, look }","parent":null,"children":[{"krate":0,"index":2143},{"krate":0,"index":2144}],"decl_id":null,"docs":" Representation of the `EmptyLook` instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2143},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":350254,"byte_end":350258,"line_start":325,"line_end":325,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstEmptyLook::goto","value":"usize","parent":{"krate":0,"index":2142},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2144},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":350328,"byte_end":350332,"line_start":327,"line_end":327,"column_start":9,"column_end":13},"name":"look","qualname":"::prog::InstEmptyLook::look","value":"prog::EmptyLook","parent":{"krate":0,"index":2142},"children":[],"decl_id":null,"docs":" The type of zero-width assertion to check.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2150},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":350496,"byte_end":350505,"line_start":334,"line_end":334,"column_start":5,"column_end":14},"name":"StartLine","qualname":"::prog::EmptyLook::StartLine","value":"EmptyLook::StartLine","parent":{"krate":0,"index":2149},"children":[],"decl_id":null,"docs":" Start of line or input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2152},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":350541,"byte_end":350548,"line_start":336,"line_end":336,"column_start":5,"column_end":12},"name":"EndLine","qualname":"::prog::EmptyLook::EndLine","value":"EmptyLook::EndLine","parent":{"krate":0,"index":2149},"children":[],"decl_id":null,"docs":" End of line or input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2154},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":350578,"byte_end":350587,"line_start":338,"line_end":338,"column_start":5,"column_end":14},"name":"StartText","qualname":"::prog::EmptyLook::StartText","value":"EmptyLook::StartText","parent":{"krate":0,"index":2149},"children":[],"decl_id":null,"docs":" Start of input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2156},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":350615,"byte_end":350622,"line_start":340,"line_end":340,"column_start":5,"column_end":12},"name":"EndText","qualname":"::prog::EmptyLook::EndText","value":"EmptyLook::EndText","parent":{"krate":0,"index":2149},"children":[],"decl_id":null,"docs":" End of input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2158},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":350696,"byte_end":350708,"line_start":342,"line_end":342,"column_start":5,"column_end":17},"name":"WordBoundary","qualname":"::prog::EmptyLook::WordBoundary","value":"EmptyLook::WordBoundary","parent":{"krate":0,"index":2149},"children":[],"decl_id":null,"docs":" Word character on one side and non-word character on other.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2160},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":350788,"byte_end":350803,"line_start":344,"line_end":344,"column_start":5,"column_end":20},"name":"NotWordBoundary","qualname":"::prog::EmptyLook::NotWordBoundary","value":"EmptyLook::NotWordBoundary","parent":{"krate":0,"index":2149},"children":[],"decl_id":null,"docs":" Word character on both sides or non-word character on both sides.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2162},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":350838,"byte_end":350855,"line_start":346,"line_end":346,"column_start":5,"column_end":22},"name":"WordBoundaryAscii","qualname":"::prog::EmptyLook::WordBoundaryAscii","value":"EmptyLook::WordBoundaryAscii","parent":{"krate":0,"index":2149},"children":[],"decl_id":null,"docs":" ASCII word boundary.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2164},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":350894,"byte_end":350914,"line_start":348,"line_end":348,"column_start":5,"column_end":25},"name":"NotWordBoundaryAscii","qualname":"::prog::EmptyLook::NotWordBoundaryAscii","value":"EmptyLook::NotWordBoundaryAscii","parent":{"krate":0,"index":2149},"children":[],"decl_id":null,"docs":" Not ASCII word boundary.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2149},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":350448,"byte_end":350457,"line_start":332,"line_end":332,"column_start":10,"column_end":19},"name":"EmptyLook","qualname":"::prog::EmptyLook","value":"EmptyLook::{StartLine, EndLine, StartText, EndText, WordBoundary, NotWordBoundary, WordBoundaryAscii, NotWordBoundaryAscii}","parent":null,"children":[{"krate":0,"index":2150},{"krate":0,"index":2152},{"krate":0,"index":2154},{"krate":0,"index":2156},{"krate":0,"index":2158},{"krate":0,"index":2160},{"krate":0,"index":2162},{"krate":0,"index":2164}],"decl_id":null,"docs":" The set of zero-width match instructions.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2175},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":350998,"byte_end":351006,"line_start":353,"line_end":353,"column_start":12,"column_end":20},"name":"InstChar","qualname":"::prog::InstChar","value":"InstChar { goto, c }","parent":null,"children":[{"krate":0,"index":2176},{"krate":0,"index":2177}],"decl_id":null,"docs":" Representation of the Char instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2176},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":351107,"byte_end":351111,"line_start":356,"line_end":356,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstChar::goto","value":"usize","parent":{"krate":0,"index":2175},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2177},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":351161,"byte_end":351162,"line_start":358,"line_end":358,"column_start":9,"column_end":10},"name":"c","qualname":"::prog::InstChar::c","value":"char","parent":{"krate":0,"index":2175},"children":[],"decl_id":null,"docs":" The character to test.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2182},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":351254,"byte_end":351264,"line_start":363,"line_end":363,"column_start":12,"column_end":22},"name":"InstRanges","qualname":"::prog::InstRanges","value":"InstRanges { goto, ranges }","parent":null,"children":[{"krate":0,"index":2183},{"krate":0,"index":2184}],"decl_id":null,"docs":" Representation of the Ranges instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2183},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":351365,"byte_end":351369,"line_start":366,"line_end":366,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstRanges::goto","value":"usize","parent":{"krate":0,"index":2182},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2184},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":351444,"byte_end":351450,"line_start":368,"line_end":368,"column_start":9,"column_end":15},"name":"ranges","qualname":"::prog::InstRanges::ranges","value":"std::vec::Vec<(char, char)>","parent":{"krate":0,"index":2182},"children":[],"decl_id":null,"docs":" The set of Unicode scalar value ranges to test.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":876},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":351577,"byte_end":351584,"line_start":373,"line_end":373,"column_start":12,"column_end":19},"name":"matches","qualname":"<InstRanges>::matches","value":"fn (&self, c: Char) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the given input character matches this instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":878},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":352370,"byte_end":352379,"line_start":398,"line_end":398,"column_start":12,"column_end":21},"name":"num_chars","qualname":"<InstRanges>::num_chars","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of distinct characters represented by all of the\n ranges.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2189},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":352634,"byte_end":352643,"line_start":408,"line_end":408,"column_start":12,"column_end":21},"name":"InstBytes","qualname":"::prog::InstBytes","value":"InstBytes { goto, start, end }","parent":null,"children":[{"krate":0,"index":2190},{"krate":0,"index":2191},{"krate":0,"index":2192}],"decl_id":null,"docs":" Representation of the Bytes instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2190},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":352744,"byte_end":352748,"line_start":411,"line_end":411,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstBytes::goto","value":"usize","parent":{"krate":0,"index":2189},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2191},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":352817,"byte_end":352822,"line_start":413,"line_end":413,"column_start":9,"column_end":14},"name":"start","qualname":"::prog::InstBytes::start","value":"u8","parent":{"krate":0,"index":2189},"children":[],"decl_id":null,"docs":" The start (inclusive) of this byte range.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2192},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":352884,"byte_end":352887,"line_start":415,"line_end":415,"column_start":9,"column_end":12},"name":"end","qualname":"::prog::InstBytes::end","value":"u8","parent":{"krate":0,"index":2189},"children":[],"decl_id":null,"docs":" The end (inclusive) of this byte range.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":882},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":352993,"byte_end":353000,"line_start":420,"line_end":420,"column_start":12,"column_end":19},"name":"matches","qualname":"<InstBytes>::matches","value":"fn (&self, byte: u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the given byte is in this range.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2197},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_builder.rs","byte_start":353691,"byte_end":353703,"line_start":14,"line_end":14,"column_start":12,"column_end":24},"name":"RegexOptions","qualname":"::re_builder::RegexOptions","value":"RegexOptions { pats, size_limit, dfa_size_limit, nest_limit, case_insensitive, multi_line, dot_matches_new_line, swap_greed, ignore_whitespace, unicode, octal }","parent":null,"children":[{"krate":0,"index":2198},{"krate":0,"index":2199},{"krate":0,"index":2200},{"krate":0,"index":2201},{"krate":0,"index":2202},{"krate":0,"index":2203},{"krate":0,"index":2204},{"krate":0,"index":2205},{"krate":0,"index":2206},{"krate":0,"index":2207},{"krate":0,"index":2208}],"decl_id":null,"docs":" The set of user configurable options for compiling zero or more regexes.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_builder.rs","byte_start":353657,"byte_end":353679,"line_start":13,"line_end":13,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":2198},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_builder.rs","byte_start":353714,"byte_end":353718,"line_start":15,"line_end":15,"column_start":9,"column_end":13},"name":"pats","qualname":"::re_builder::RegexOptions::pats","value":"std::vec::Vec<std::string::String>","parent":{"krate":0,"index":2197},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2199},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_builder.rs","byte_start":353741,"byte_end":353751,"line_start":16,"line_end":16,"column_start":9,"column_end":19},"name":"size_limit","qualname":"::re_builder::RegexOptions::size_limit","value":"usize","parent":{"krate":0,"index":2197},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2200},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_builder.rs","byte_start":353768,"byte_end":353782,"line_start":17,"line_end":17,"column_start":9,"column_end":23},"name":"dfa_size_limit","qualname":"::re_builder::RegexOptions::dfa_size_limit","value":"usize","parent":{"krate":0,"index":2197},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2201},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_builder.rs","byte_start":353799,"byte_end":353809,"line_start":18,"line_end":18,"column_start":9,"column_end":19},"name":"nest_limit","qualname":"::re_builder::RegexOptions::nest_limit","value":"u32","parent":{"krate":0,"index":2197},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2202},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_builder.rs","byte_start":353824,"byte_end":353840,"line_start":19,"line_end":19,"column_start":9,"column_end":25},"name":"case_insensitive","qualname":"::re_builder::RegexOptions::case_insensitive","value":"bool","parent":{"krate":0,"index":2197},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2203},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_builder.rs","byte_start":353856,"byte_end":353866,"line_start":20,"line_end":20,"column_start":9,"column_end":19},"name":"multi_line","qualname":"::re_builder::RegexOptions::multi_line","value":"bool","parent":{"krate":0,"index":2197},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2204},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_builder.rs","byte_start":353882,"byte_end":353902,"line_start":21,"line_end":21,"column_start":9,"column_end":29},"name":"dot_matches_new_line","qualname":"::re_builder::RegexOptions::dot_matches_new_line","value":"bool","parent":{"krate":0,"index":2197},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2205},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_builder.rs","byte_start":353918,"byte_end":353928,"line_start":22,"line_end":22,"column_start":9,"column_end":19},"name":"swap_greed","qualname":"::re_builder::RegexOptions::swap_greed","value":"bool","parent":{"krate":0,"index":2197},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2206},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_builder.rs","byte_start":353944,"byte_end":353961,"line_start":23,"line_end":23,"column_start":9,"column_end":26},"name":"ignore_whitespace","qualname":"::re_builder::RegexOptions::ignore_whitespace","value":"bool","parent":{"krate":0,"index":2197},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2207},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_builder.rs","byte_start":353977,"byte_end":353984,"line_start":24,"line_end":24,"column_start":9,"column_end":16},"name":"unicode","qualname":"::re_builder::RegexOptions::unicode","value":"bool","parent":{"krate":0,"index":2197},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2208},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_builder.rs","byte_start":354000,"byte_end":354005,"line_start":25,"line_end":25,"column_start":9,"column_end":14},"name":"octal","qualname":"::re_builder::RegexOptions::octal","value":"bool","parent":{"krate":0,"index":2197},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2301},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":369130,"byte_end":369135,"line_start":30,"line_end":30,"column_start":12,"column_end":17},"name":"Match","qualname":"::re_bytes::Match","value":"Match {  }","parent":null,"children":[{"krate":0,"index":2303},{"krate":0,"index":2304},{"krate":0,"index":2305}],"decl_id":null,"docs":" Match represents a single match of a regex in a haystack.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":908},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":369316,"byte_end":369321,"line_start":39,"line_end":39,"column_start":12,"column_end":17},"name":"start","qualname":"<Match>::start","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the starting byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":369295,"byte_end":369304,"line_start":38,"line_end":38,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":909},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":369460,"byte_end":369463,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"end","qualname":"<Match>::end","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the ending byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":369439,"byte_end":369448,"line_start":44,"line_end":44,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":910},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":369565,"byte_end":369573,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<Match>::as_bytes","value":"fn (&self) -> &'t [u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the matched text.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":369544,"byte_end":369553,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2321},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":370587,"byte_end":370592,"line_start":78,"line_end":78,"column_start":12,"column_end":17},"name":"Regex","qualname":"::re_bytes::Regex","value":"","parent":null,"children":[],"decl_id":null,"docs":" A compiled regular expression for matching arbitrary bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":922},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":371651,"byte_end":371654,"line_start":119,"line_end":119,"column_start":12,"column_end":15},"name":"new","qualname":"<Regex>::new","value":"fn (re: &str) -> Result<Regex, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compiles a regular expression. Once compiled, it can be used repeatedly\n to search, split or replace text in a string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":923},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":372385,"byte_end":372393,"line_start":141,"line_end":141,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Regex>::is_match","value":"fn (&self, text: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the regex matches the string given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":924},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":373255,"byte_end":373259,"line_start":165,"line_end":165,"column_start":12,"column_end":16},"name":"find","qualname":"<Regex>::find","value":"fn <'t> (&self, text: &'t [u8]) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end byte range of the leftmost-first match in\n `text`. If no match exists, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":926},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":373975,"byte_end":373984,"line_start":187,"line_end":187,"column_start":12,"column_end":21},"name":"find_iter","qualname":"<Regex>::find_iter","value":"fn <'r, 't> (&'r self, text: &'t [u8]) -> Matches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator for each successive non-overlapping match in\n `text`, returning the start and end byte indices with respect to\n `text`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":929},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":377121,"byte_end":377129,"line_start":254,"line_end":254,"column_start":12,"column_end":20},"name":"captures","qualname":"<Regex>::captures","value":"fn <'t> (&self, text: &'t [u8]) -> Option<Captures<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the capture groups corresponding to the leftmost-first\n match in `text`. Capture group `0` always corresponds to the entire\n match. If no match is found, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":932},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":378574,"byte_end":378587,"line_start":289,"line_end":289,"column_start":12,"column_end":25},"name":"captures_iter","qualname":"<Regex>::captures_iter","value":"fn <'r, 't> (&'r self, text: &'t [u8]) -> CaptureMatches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all the non-overlapping capture groups matched\n in `text`. This is operationally the same as `find_iter`, except it\n yields information about capturing group matches.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":935},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":379505,"byte_end":379510,"line_start":316,"line_end":316,"column_start":12,"column_end":17},"name":"split","qualname":"<Regex>::split","value":"fn <'r, 't> (&'r self, text: &'t [u8]) -> Split<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of substrings of `text` delimited by a match of the\n regular expression. Namely, each element of the iterator corresponds to\n text that *isn't* matched by the regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":938},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":380526,"byte_end":380532,"line_start":343,"line_end":343,"column_start":12,"column_end":18},"name":"splitn","qualname":"<Regex>::splitn","value":"fn <'r, 't> (&'r self, text: &'t [u8], limit: usize) -> SplitN<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of at most `limit` substrings of `text` delimited\n by a match of the regular expression. (A `limit` of `0` will return no\n substrings.) Namely, each element of the iterator corresponds to text\n that *isn't* matched by the regular expression. The remainder of the\n string that is not split will be the last element in the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":941},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":385315,"byte_end":385322,"line_start":462,"line_end":462,"column_start":12,"column_end":19},"name":"replace","qualname":"<Regex>::replace","value":"fn <'t, R> (&self, text: &'t [u8], rep: R) -> Cow<'t, [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Replaces the leftmost-first match with the replacement provided. The\n replacement can be a regular byte string (where `$N` and `$name` are\n expanded to match capture groups) or a function that takes the matches'\n `Captures` and returns the replaced byte string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":944},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":385779,"byte_end":385790,"line_start":476,"line_end":476,"column_start":12,"column_end":23},"name":"replace_all","qualname":"<Regex>::replace_all","value":"fn <'t, R> (&self, text: &'t [u8], rep: R) -> Cow<'t, [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Replaces all non-overlapping matches in `text` with the replacement\n provided. This is the same as calling `replacen` with `limit` set to\n `0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":947},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":386259,"byte_end":386267,"line_start":490,"line_end":490,"column_start":12,"column_end":20},"name":"replacen","qualname":"<Regex>::replacen","value":"fn <'t, R> (&self, text: &'t [u8], limit: usize, mut rep: R) -> Cow<'t, [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Replaces at most `limit` non-overlapping matches in `text` with the\n replacement provided. If `limit` is 0, then all non-overlapping matches\n are replaced.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":951},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":388742,"byte_end":388756,"line_start":561,"line_end":561,"column_start":12,"column_end":26},"name":"shortest_match","qualname":"<Regex>::shortest_match","value":"fn (&self, text: &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the end location of a match in the text given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":952},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":389144,"byte_end":389161,"line_start":571,"line_end":571,"column_start":12,"column_end":29},"name":"shortest_match_at","qualname":"<Regex>::shortest_match_at","value":"fn (&self, text: &[u8], start: usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as shortest_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":953},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":389605,"byte_end":389616,"line_start":585,"line_end":585,"column_start":12,"column_end":23},"name":"is_match_at","qualname":"<Regex>::is_match_at","value":"fn (&self, text: &[u8], start: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as is_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":954},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":390013,"byte_end":390020,"line_start":595,"line_end":595,"column_start":12,"column_end":19},"name":"find_at","qualname":"<Regex>::find_at","value":"fn <'t> (&self, text: &'t [u8], start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as find, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":957},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":390668,"byte_end":390681,"line_start":614,"line_end":614,"column_start":12,"column_end":25},"name":"captures_read","qualname":"<Regex>::captures_read","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t [u8]) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" This is like `captures`, but uses\n [`CaptureLocations`](struct.CaptureLocations.html)\n instead of\n [`Captures`](struct.Captures.html) in order to amortize allocations.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":959},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":391188,"byte_end":391204,"line_start":628,"line_end":628,"column_start":12,"column_end":28},"name":"captures_read_at","qualname":"<Regex>::captures_read_at","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t [u8], start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as `captures_read`, but starts the search at the given\n offset and populates the capture locations given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":962},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":391749,"byte_end":391765,"line_start":646,"line_end":646,"column_start":12,"column_end":28},"name":"read_captures_at","qualname":"<Regex>::read_captures_at","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t [u8], start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" An undocumented alias for `captures_read_at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":965},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":392054,"byte_end":392060,"line_start":659,"line_end":659,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Regex>::as_str","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the original string of this regex.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":966},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":392183,"byte_end":392196,"line_start":664,"line_end":664,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Regex>::capture_names","value":"fn (&self) -> CaptureNames","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the capture names.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":967},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":392332,"byte_end":392344,"line_start":669,"line_end":669,"column_start":12,"column_end":24},"name":"captures_len","qualname":"<Regex>::captures_len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captures.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":968},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":392555,"byte_end":392572,"line_start":675,"line_end":675,"column_start":12,"column_end":29},"name":"capture_locations","qualname":"<Regex>::capture_locations","value":"fn (&self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty set of capture locations that can be reused in\n multiple calls to `captures_read` or `captures_read_at`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":969},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":392919,"byte_end":392928,"line_start":684,"line_end":684,"column_start":12,"column_end":21},"name":"locations","qualname":"<Regex>::locations","value":"fn (&self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" An alias for `capture_locations` to preserve backward compatibility.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":970},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":393418,"byte_end":393425,"line_start":697,"line_end":697,"column_start":12,"column_end":19},"name":"Matches","qualname":"::re_bytes::Matches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all non-overlapping matches for a particular string.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":981},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":393998,"byte_end":394012,"line_start":715,"line_end":715,"column_start":12,"column_end":26},"name":"CaptureMatches","qualname":"::re_bytes::CaptureMatches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all non-overlapping capture groups matching a\n particular regular expression.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":992},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":394593,"byte_end":394598,"line_start":733,"line_end":733,"column_start":12,"column_end":17},"name":"Split","qualname":"::re_bytes::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":995},{"krate":0,"index":996}],"decl_id":null,"docs":" Yields all substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1002},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":395581,"byte_end":395587,"line_start":768,"line_end":768,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::re_bytes::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":1005},{"krate":0,"index":1006}],"decl_id":null,"docs":" Yields at most `N` substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1012},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":396282,"byte_end":396294,"line_start":796,"line_end":796,"column_start":12,"column_end":24},"name":"CaptureNames","qualname":"::re_bytes::CaptureNames","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the names of all possible captures.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2326},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":397429,"byte_end":397445,"line_start":827,"line_end":827,"column_start":12,"column_end":28},"name":"CaptureLocations","qualname":"::re_bytes::CaptureLocations","value":"","parent":null,"children":[],"decl_id":null,"docs":" CaptureLocations is a low level representation of the raw offsets of each\n submatch.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1023},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":397767,"byte_end":397776,"line_start":835,"line_end":835,"column_start":10,"column_end":19},"name":"Locations","qualname":"::re_bytes::Locations","value":"CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" A type alias for `CaptureLocations` for backwards compatibility.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1025},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":398134,"byte_end":398137,"line_start":843,"line_end":843,"column_start":12,"column_end":15},"name":"get","qualname":"<CaptureLocations>::get","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end positions of the Nth capture group. Returns\n `None` if `i` is not a valid capture group or if the capture group did\n not match anything. The positions returned are *always* byte indices\n with respect to the original string matched.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":398113,"byte_end":398122,"line_start":842,"line_end":842,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1026},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":398432,"byte_end":398435,"line_start":852,"line_end":852,"column_start":12,"column_end":15},"name":"len","qualname":"<CaptureLocations>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of capturing groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":398411,"byte_end":398420,"line_start":851,"line_end":851,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1027},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":398795,"byte_end":398798,"line_start":863,"line_end":863,"column_start":12,"column_end":15},"name":"pos","qualname":"<CaptureLocations>::pos","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" An alias for the `get` method for backwards compatibility.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":398774,"byte_end":398783,"line_start":862,"line_end":862,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1028},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":399432,"byte_end":399440,"line_start":879,"line_end":879,"column_start":12,"column_end":20},"name":"Captures","qualname":"::re_bytes::Captures","value":"Captures {  }","parent":null,"children":[{"krate":0,"index":1030},{"krate":0,"index":1031},{"krate":0,"index":1032}],"decl_id":null,"docs":" Captures represents a group of captured byte strings for a single match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1035},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":400375,"byte_end":400378,"line_start":905,"line_end":905,"column_start":12,"column_end":15},"name":"get","qualname":"<Captures>::get","value":"fn (&self, i: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match associated with the capture group at index `i`. If\n `i` does not correspond to a capture group, or if the capture group\n did not participate in the match, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1037},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":400663,"byte_end":400667,"line_start":911,"line_end":911,"column_start":12,"column_end":16},"name":"name","qualname":"<Captures>::name","value":"fn (&self, name: &str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match for the capture group named `name`. If `name` isn't a\n valid capture group or didn't match anything, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1039},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":401099,"byte_end":401103,"line_start":920,"line_end":920,"column_start":12,"column_end":16},"name":"iter","qualname":"<Captures>::iter","value":"fn <'c> (&'c self) -> SubCaptureMatches<'c, 't>","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which\n they appear in the regex. If a particular capture group didn't\n participate in the match, then `None` is yielded for that capture.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1041},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":402147,"byte_end":402153,"line_start":943,"line_end":943,"column_start":12,"column_end":18},"name":"expand","qualname":"<Captures>::expand","value":"fn (&self, replacement: &[u8], dst: &mut Vec<u8>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Expands all instances of `$name` in `replacement` to the corresponding\n capture group `name`, and writes them to the `dst` buffer given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1042},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":402464,"byte_end":402467,"line_start":952,"line_end":952,"column_start":12,"column_end":15},"name":"len","qualname":"<Captures>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captured groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":402443,"byte_end":402452,"line_start":951,"line_end":951,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1074},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":405597,"byte_end":405614,"line_start":1049,"line_end":1049,"column_start":12,"column_end":29},"name":"SubCaptureMatches","qualname":"::re_bytes::SubCaptureMatches","value":"SubCaptureMatches {  }","parent":null,"children":[{"krate":0,"index":1077},{"krate":0,"index":1078}],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which they\n appear in the regex.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1086},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":406307,"byte_end":406315,"line_start":1070,"line_end":1070,"column_start":11,"column_end":19},"name":"Replacer","qualname":"::re_bytes::Replacer","value":"Replacer","parent":null,"children":[{"krate":0,"index":1087},{"krate":0,"index":1088},{"krate":0,"index":1090}],"decl_id":null,"docs":" Replacer describes types that can be used to replace matches in a byte\n string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1087},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":406601,"byte_end":406615,"line_start":1078,"line_end":1078,"column_start":8,"column_end":22},"name":"replace_append","qualname":"::re_bytes::Replacer::replace_append","value":"fn (&mut self, caps: &Captures, dst: &mut Vec<u8>) -> ()","parent":{"krate":0,"index":1086},"children":[],"decl_id":null,"docs":" Appends text to `dst` to replace the current match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1088},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":407026,"byte_end":407038,"line_start":1087,"line_end":1087,"column_start":8,"column_end":20},"name":"no_expansion","qualname":"::re_bytes::Replacer::no_expansion","value":"fn <'r> (&'r mut self) -> Option<Cow<'r, [u8]>>","parent":{"krate":0,"index":1086},"children":[],"decl_id":null,"docs":" Return a fixed unchanging replacement byte string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1090},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":407769,"byte_end":407775,"line_start":1112,"line_end":1112,"column_start":8,"column_end":14},"name":"by_ref","qualname":"::re_bytes::Replacer::by_ref","value":"fn <'r> (&'r mut self) -> ReplacerRef<'r, Self>","parent":{"krate":0,"index":1086},"children":[],"decl_id":null,"docs":" Return a `Replacer` that borrows and wraps this `Replacer`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2333},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":408003,"byte_end":408014,"line_start":1121,"line_end":1121,"column_start":12,"column_end":23},"name":"ReplacerRef","qualname":"::re_bytes::ReplacerRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" By-reference adaptor for a `Replacer`","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1106},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":409299,"byte_end":409307,"line_start":1159,"line_end":1159,"column_start":12,"column_end":20},"name":"NoExpand","qualname":"::re_bytes::NoExpand","value":"","parent":null,"children":[],"decl_id":null,"docs":" `NoExpand` indicates literal byte string replacement.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2492},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":426105,"byte_end":426114,"line_start":22,"line_end":22,"column_start":12,"column_end":21},"name":"Locations","qualname":"::re_trait::Locations","value":"","parent":null,"children":[],"decl_id":null,"docs":" Locations represents the offsets of each capturing group in a regex for\n a single match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1119},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":426443,"byte_end":426446,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"pos","qualname":"<Locations>::pos","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end positions of the Nth capture group. Returns\n `None` if `i` is not a valid capture group or if the capture group did\n not match anything. The positions returned are *always* byte indices\n with respect to the original string matched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1120},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":426890,"byte_end":426894,"line_start":40,"line_end":40,"column_start":12,"column_end":16},"name":"iter","qualname":"<Locations>::iter","value":"fn (&self) -> SubCapturesPosIter","parent":null,"children":[],"decl_id":null,"docs":" Creates an iterator of all the capture group positions in order of\n appearance in the regular expression. Positions are byte indices\n in terms of the original string matched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1121},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":427189,"byte_end":427192,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"len","qualname":"<Locations>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of capturing groups.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1123},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":427605,"byte_end":427623,"line_start":64,"line_end":64,"column_start":12,"column_end":30},"name":"SubCapturesPosIter","qualname":"::re_trait::SubCapturesPosIter","value":"SubCapturesPosIter {  }","parent":null,"children":[{"krate":0,"index":1125},{"krate":0,"index":1126}],"decl_id":null,"docs":" An iterator over capture group positions for a particular match of a\n regular expression.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1131},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":428826,"byte_end":428843,"line_start":99,"line_end":99,"column_start":11,"column_end":28},"name":"RegularExpression","qualname":"::re_trait::RegularExpression","value":"RegularExpression: Sized","parent":null,"children":[{"krate":0,"index":1132},{"krate":0,"index":1133},{"krate":0,"index":1134},{"krate":0,"index":1135},{"krate":0,"index":1136},{"krate":0,"index":1137},{"krate":0,"index":1138},{"krate":0,"index":1139},{"krate":0,"index":1140},{"krate":0,"index":1141}],"decl_id":null,"docs":" `RegularExpression` describes types that can implement regex searching.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1132},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":428896,"byte_end":428900,"line_start":101,"line_end":101,"column_start":10,"column_end":14},"name":"Text","qualname":"::re_trait::RegularExpression::Text","value":"type Text: ?Sized;","parent":{"krate":0,"index":1131},"children":[],"decl_id":null,"docs":" The type of the haystack.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1133},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":429075,"byte_end":429084,"line_start":105,"line_end":105,"column_start":8,"column_end":17},"name":"slots_len","qualname":"::re_trait::RegularExpression::slots_len","value":"fn (&self) -> usize","parent":{"krate":0,"index":1131},"children":[],"decl_id":null,"docs":" The number of capture slots in the compiled regular expression. This is\n always two times the number of capture groups (two slots per group).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1134},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":429180,"byte_end":429189,"line_start":108,"line_end":108,"column_start":8,"column_end":17},"name":"locations","qualname":"::re_trait::RegularExpression::locations","value":"fn (&self) -> Locations","parent":{"krate":0,"index":1131},"children":[],"decl_id":null,"docs":" Allocates fresh space for all capturing groups in this regex.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1135},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":429535,"byte_end":429551,"line_start":117,"line_end":117,"column_start":8,"column_end":24},"name":"next_after_empty","qualname":"::re_trait::RegularExpression::next_after_empty","value":"fn (&self, text: &Self::Text, i: usize) -> usize","parent":{"krate":0,"index":1131},"children":[],"decl_id":null,"docs":" Returns the position of the next character after `i`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1136},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":429658,"byte_end":429675,"line_start":120,"line_end":120,"column_start":8,"column_end":25},"name":"shortest_match_at","qualname":"::re_trait::RegularExpression::shortest_match_at","value":"fn (&self, text: &Self::Text, start: usize) -> Option<usize>","parent":{"krate":0,"index":1131},"children":[],"decl_id":null,"docs":" Returns the location of the shortest match.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1137},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":429831,"byte_end":429842,"line_start":127,"line_end":127,"column_start":8,"column_end":19},"name":"is_match_at","qualname":"::re_trait::RegularExpression::is_match_at","value":"fn (&self, text: &Self::Text, start: usize) -> bool","parent":{"krate":0,"index":1131},"children":[],"decl_id":null,"docs":" Returns whether the regex matches the text given.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1138},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":429996,"byte_end":430003,"line_start":134,"line_end":134,"column_start":8,"column_end":15},"name":"find_at","qualname":"::re_trait::RegularExpression::find_at","value":"fn (&self, text: &Self::Text, start: usize) -> Option<(usize, usize)>","parent":{"krate":0,"index":1131},"children":[],"decl_id":null,"docs":" Returns the leftmost-first match location if one exists.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1139},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":430238,"byte_end":430254,"line_start":142,"line_end":142,"column_start":8,"column_end":24},"name":"captures_read_at","qualname":"::re_trait::RegularExpression::captures_read_at","value":"fn (&self, locs: &mut Locations, text: &Self::Text, start: usize) -> Option<(usize, usize)>","parent":{"krate":0,"index":1131},"children":[],"decl_id":null,"docs":" Returns the leftmost-first match location if one exists, and also\n fills in any matching capture slot locations.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1140},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":430487,"byte_end":430496,"line_start":151,"line_end":151,"column_start":8,"column_end":17},"name":"find_iter","qualname":"::re_trait::RegularExpression::find_iter","value":"fn (self, text: &Self::Text) -> Matches<Self>","parent":{"krate":0,"index":1131},"children":[],"decl_id":null,"docs":" Returns an iterator over all non-overlapping successive leftmost-first\n matches.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1141},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":430818,"byte_end":430831,"line_start":165,"line_end":165,"column_start":8,"column_end":21},"name":"captures_iter","qualname":"::re_trait::RegularExpression::captures_iter","value":"fn (self, text: &Self::Text) -> CaptureMatches<Self>","parent":{"krate":0,"index":1131},"children":[],"decl_id":null,"docs":" Returns an iterator over all non-overlapping successive leftmost-first\n matches with captures.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1142},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":431047,"byte_end":431054,"line_start":174,"line_end":174,"column_start":12,"column_end":19},"name":"Matches","qualname":"::re_trait::Matches","value":"Matches {  }","parent":null,"children":[{"krate":0,"index":1145},{"krate":0,"index":1146},{"krate":0,"index":1147},{"krate":0,"index":1148}],"decl_id":null,"docs":" An iterator over all non-overlapping successive leftmost-first matches.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1152},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":431313,"byte_end":431317,"line_start":183,"line_end":183,"column_start":12,"column_end":16},"name":"text","qualname":"<Matches>::text","value":"fn (&self) -> &'t R::Text","parent":null,"children":[],"decl_id":null,"docs":" Return the text being searched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1153},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":431415,"byte_end":431420,"line_start":188,"line_end":188,"column_start":12,"column_end":17},"name":"regex","qualname":"<Matches>::regex","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying regex.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1159},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":432620,"byte_end":432634,"line_start":225,"line_end":225,"column_start":12,"column_end":26},"name":"CaptureMatches","qualname":"::re_trait::CaptureMatches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all non-overlapping successive leftmost-first matches with\n captures.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1167},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":432831,"byte_end":432835,"line_start":230,"line_end":230,"column_start":12,"column_end":16},"name":"text","qualname":"<CaptureMatches>::text","value":"fn (&self) -> &'t R::Text","parent":null,"children":[],"decl_id":null,"docs":" Return the text being searched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1168},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":432937,"byte_end":432942,"line_start":235,"line_end":235,"column_start":12,"column_end":17},"name":"regex","qualname":"<CaptureMatches>::regex","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying regex.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1193},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":434823,"byte_end":434829,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"escape","qualname":"::re_unicode::escape","value":"fn (text: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Escapes all regular expression meta characters in `text`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2499},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":435080,"byte_end":435085,"line_start":39,"line_end":39,"column_start":12,"column_end":17},"name":"Match","qualname":"::re_unicode::Match","value":"Match {  }","parent":null,"children":[{"krate":0,"index":2501},{"krate":0,"index":2502},{"krate":0,"index":2503}],"decl_id":null,"docs":" Match represents a single match of a regex in a haystack.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1196},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":435265,"byte_end":435270,"line_start":48,"line_end":48,"column_start":12,"column_end":17},"name":"start","qualname":"<Match>::start","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the starting byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":435244,"byte_end":435253,"line_start":47,"line_end":47,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1197},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":435409,"byte_end":435412,"line_start":54,"line_end":54,"column_start":12,"column_end":15},"name":"end","qualname":"<Match>::end","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the ending byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":435388,"byte_end":435397,"line_start":53,"line_end":53,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1198},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":435514,"byte_end":435520,"line_start":60,"line_end":60,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Match>::as_str","value":"fn (&self) -> &'t str","parent":null,"children":[],"decl_id":null,"docs":" Returns the matched text.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":435493,"byte_end":435502,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2519},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":438225,"byte_end":438230,"line_start":137,"line_end":137,"column_start":12,"column_end":17},"name":"Regex","qualname":"::re_unicode::Regex","value":"","parent":null,"children":[],"decl_id":null,"docs":" A compiled regular expression for matching Unicode strings.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1213},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":439172,"byte_end":439175,"line_start":175,"line_end":175,"column_start":12,"column_end":15},"name":"new","qualname":"<Regex>::new","value":"fn (re: &str) -> Result<Regex, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compiles a regular expression. Once compiled, it can be used repeatedly\n to search, split or replace text in a string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1214},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":439905,"byte_end":439913,"line_start":197,"line_end":197,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Regex>::is_match","value":"fn (&self, text: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the regex matches the string given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1215},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":440789,"byte_end":440793,"line_start":222,"line_end":222,"column_start":12,"column_end":16},"name":"find","qualname":"<Regex>::find","value":"fn <'t> (&self, text: &'t str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end byte range of the leftmost-first match in\n `text`. If no match exists, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1217},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":441507,"byte_end":441516,"line_start":244,"line_end":244,"column_start":12,"column_end":21},"name":"find_iter","qualname":"<Regex>::find_iter","value":"fn <'r, 't> (&'r self, text: &'t str) -> Matches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator for each successive non-overlapping match in\n `text`, returning the start and end byte indices with respect to\n `text`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1220},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":444596,"byte_end":444604,"line_start":311,"line_end":311,"column_start":12,"column_end":20},"name":"captures","qualname":"<Regex>::captures","value":"fn <'t> (&self, text: &'t str) -> Option<Captures<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the capture groups corresponding to the leftmost-first\n match in `text`. Capture group `0` always corresponds to the entire\n match. If no match is found, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1223},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":445937,"byte_end":445950,"line_start":345,"line_end":345,"column_start":12,"column_end":25},"name":"captures_iter","qualname":"<Regex>::captures_iter","value":"fn <'r, 't> (&'r self, text: &'t str) -> CaptureMatches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all the non-overlapping capture groups matched\n in `text`. This is operationally the same as `find_iter`, except it\n yields information about capturing group matches.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1226},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":446809,"byte_end":446814,"line_start":370,"line_end":370,"column_start":12,"column_end":17},"name":"split","qualname":"<Regex>::split","value":"fn <'r, 't> (&'r self, text: &'t str) -> Split<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of substrings of `text` delimited by a match of the\n regular expression. Namely, each element of the iterator corresponds to\n text that *isn't* matched by the regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1229},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":447802,"byte_end":447808,"line_start":397,"line_end":397,"column_start":12,"column_end":18},"name":"splitn","qualname":"<Regex>::splitn","value":"fn <'r, 't> (&'r self, text: &'t str, limit: usize) -> SplitN<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of at most `limit` substrings of `text` delimited\n by a match of the regular expression. (A `limit` of `0` will return no\n substrings.) Namely, each element of the iterator corresponds to text\n that *isn't* matched by the regular expression. The remainder of the\n string that is not split will be the last element in the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1232},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":452345,"byte_end":452352,"line_start":509,"line_end":509,"column_start":12,"column_end":19},"name":"replace","qualname":"<Regex>::replace","value":"fn <'t, R> (&self, text: &'t str, rep: R) -> Cow<'t, str>","parent":null,"children":[],"decl_id":null,"docs":" Replaces the leftmost-first match with the replacement provided.\n The replacement can be a regular string (where `$N` and `$name` are\n expanded to match capture groups) or a function that takes the matches'\n `Captures` and returns the replaced string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1235},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":452809,"byte_end":452820,"line_start":523,"line_end":523,"column_start":12,"column_end":23},"name":"replace_all","qualname":"<Regex>::replace_all","value":"fn <'t, R> (&self, text: &'t str, rep: R) -> Cow<'t, str>","parent":null,"children":[],"decl_id":null,"docs":" Replaces all non-overlapping matches in `text` with the replacement\n provided. This is the same as calling `replacen` with `limit` set to\n `0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1238},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":453289,"byte_end":453297,"line_start":537,"line_end":537,"column_start":12,"column_end":20},"name":"replacen","qualname":"<Regex>::replacen","value":"fn <'t, R> (&self, text: &'t str, limit: usize, mut rep: R) -> Cow<'t, str>","parent":null,"children":[],"decl_id":null,"docs":" Replaces at most `limit` non-overlapping matches in `text` with the\n replacement provided. If `limit` is 0, then all non-overlapping matches\n are replaced.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1242},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":456253,"byte_end":456267,"line_start":617,"line_end":617,"column_start":12,"column_end":26},"name":"shortest_match","qualname":"<Regex>::shortest_match","value":"fn (&self, text: &str) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the end location of a match in the text given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1243},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":456654,"byte_end":456671,"line_start":627,"line_end":627,"column_start":12,"column_end":29},"name":"shortest_match_at","qualname":"<Regex>::shortest_match_at","value":"fn (&self, text: &str, start: usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as shortest_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1244},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":457118,"byte_end":457129,"line_start":641,"line_end":641,"column_start":12,"column_end":23},"name":"is_match_at","qualname":"<Regex>::is_match_at","value":"fn (&self, text: &str, start: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as is_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1245},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":457525,"byte_end":457532,"line_start":651,"line_end":651,"column_start":12,"column_end":19},"name":"find_at","qualname":"<Regex>::find_at","value":"fn <'t> (&self, text: &'t str, start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as find, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1248},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":458194,"byte_end":458207,"line_start":671,"line_end":671,"column_start":12,"column_end":25},"name":"captures_read","qualname":"<Regex>::captures_read","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" This is like `captures`, but uses\n [`CaptureLocations`](struct.CaptureLocations.html)\n instead of\n [`Captures`](struct.Captures.html) in order to amortize allocations.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1250},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":458706,"byte_end":458722,"line_start":685,"line_end":685,"column_start":12,"column_end":28},"name":"captures_read_at","qualname":"<Regex>::captures_read_at","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t str, start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as captures, but starts the search at the given\n offset and populates the capture locations given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1253},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":459270,"byte_end":459286,"line_start":703,"line_end":703,"column_start":12,"column_end":28},"name":"read_captures_at","qualname":"<Regex>::read_captures_at","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t str, start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" An undocumented alias for `captures_read_at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1256},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":459574,"byte_end":459580,"line_start":716,"line_end":716,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Regex>::as_str","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the original string of this regex.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1257},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":459703,"byte_end":459716,"line_start":721,"line_end":721,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Regex>::capture_names","value":"fn (&self) -> CaptureNames","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the capture names.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1258},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":459852,"byte_end":459864,"line_start":726,"line_end":726,"column_start":12,"column_end":24},"name":"captures_len","qualname":"<Regex>::captures_len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captures.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1259},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":460075,"byte_end":460092,"line_start":732,"line_end":732,"column_start":12,"column_end":29},"name":"capture_locations","qualname":"<Regex>::capture_locations","value":"fn (&self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty set of capture locations that can be reused in\n multiple calls to `captures_read` or `captures_read_at`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1260},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":460443,"byte_end":460452,"line_start":741,"line_end":741,"column_start":12,"column_end":21},"name":"locations","qualname":"<Regex>::locations","value":"fn (&self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" An alias for `capture_locations` to preserve backward compatibility.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1261},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":460808,"byte_end":460820,"line_start":752,"line_end":752,"column_start":12,"column_end":24},"name":"CaptureNames","qualname":"::re_unicode::CaptureNames","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the names of all possible captures.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1272},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":461409,"byte_end":461414,"line_start":773,"line_end":773,"column_start":12,"column_end":17},"name":"Split","qualname":"::re_unicode::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":1275},{"krate":0,"index":1276}],"decl_id":null,"docs":" Yields all substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1282},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":462390,"byte_end":462396,"line_start":808,"line_end":808,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::re_unicode::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":1285},{"krate":0,"index":1286}],"decl_id":null,"docs":" Yields at most `N` substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2524},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":463602,"byte_end":463618,"line_start":846,"line_end":846,"column_start":12,"column_end":28},"name":"CaptureLocations","qualname":"::re_unicode::CaptureLocations","value":"","parent":null,"children":[],"decl_id":null,"docs":" CaptureLocations is a low level representation of the raw offsets of each\n submatch.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1292},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":463940,"byte_end":463949,"line_start":854,"line_end":854,"column_start":10,"column_end":19},"name":"Locations","qualname":"::re_unicode::Locations","value":"CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" A type alias for `CaptureLocations` for backwards compatibility.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1294},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":464307,"byte_end":464310,"line_start":862,"line_end":862,"column_start":12,"column_end":15},"name":"get","qualname":"<CaptureLocations>::get","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end positions of the Nth capture group. Returns\n `None` if `i` is not a valid capture group or if the capture group did\n not match anything. The positions returned are *always* byte indices\n with respect to the original string matched.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":464286,"byte_end":464295,"line_start":861,"line_end":861,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1295},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":464605,"byte_end":464608,"line_start":871,"line_end":871,"column_start":12,"column_end":15},"name":"len","qualname":"<CaptureLocations>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of capturing groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":464584,"byte_end":464593,"line_start":870,"line_end":870,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1296},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":464968,"byte_end":464971,"line_start":882,"line_end":882,"column_start":12,"column_end":15},"name":"pos","qualname":"<CaptureLocations>::pos","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" An alias for the `get` method for backwards compatibility.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":464947,"byte_end":464956,"line_start":881,"line_end":881,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1297},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":465595,"byte_end":465603,"line_start":898,"line_end":898,"column_start":12,"column_end":20},"name":"Captures","qualname":"::re_unicode::Captures","value":"Captures {  }","parent":null,"children":[{"krate":0,"index":1299},{"krate":0,"index":1300},{"krate":0,"index":1301}],"decl_id":null,"docs":" Captures represents a group of captured strings for a single match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1304},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":466501,"byte_end":466504,"line_start":924,"line_end":924,"column_start":12,"column_end":15},"name":"get","qualname":"<Captures>::get","value":"fn (&self, i: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match associated with the capture group at index `i`. If\n `i` does not correspond to a capture group, or if the capture group\n did not participate in the match, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1306},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":466789,"byte_end":466793,"line_start":930,"line_end":930,"column_start":12,"column_end":16},"name":"name","qualname":"<Captures>::name","value":"fn (&self, name: &str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match for the capture group named `name`. If `name` isn't a\n valid capture group or didn't match anything, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1308},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":467225,"byte_end":467229,"line_start":939,"line_end":939,"column_start":12,"column_end":16},"name":"iter","qualname":"<Captures>::iter","value":"fn <'c> (&'c self) -> SubCaptureMatches<'c, 't>","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which\n they appear in the regex. If a particular capture group didn't\n participate in the match, then `None` is yielded for that capture.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1310},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":468273,"byte_end":468279,"line_start":962,"line_end":962,"column_start":12,"column_end":18},"name":"expand","qualname":"<Captures>::expand","value":"fn (&self, replacement: &str, dst: &mut String) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Expands all instances of `$name` in `replacement` to the corresponding\n capture group `name`, and writes them to the `dst` buffer given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1311},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":468586,"byte_end":468589,"line_start":971,"line_end":971,"column_start":12,"column_end":15},"name":"len","qualname":"<Captures>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captured groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":468565,"byte_end":468574,"line_start":970,"line_end":970,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1340},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":471267,"byte_end":471284,"line_start":1053,"line_end":1053,"column_start":12,"column_end":29},"name":"SubCaptureMatches","qualname":"::re_unicode::SubCaptureMatches","value":"SubCaptureMatches {  }","parent":null,"children":[{"krate":0,"index":1343},{"krate":0,"index":1344}],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which they\n appear in the regex.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1352},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":471911,"byte_end":471925,"line_start":1074,"line_end":1074,"column_start":12,"column_end":26},"name":"CaptureMatches","qualname":"::re_unicode::CaptureMatches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all non-overlapping capture groups matching a\n particular regular expression.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1363},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":472610,"byte_end":472617,"line_start":1095,"line_end":1095,"column_start":12,"column_end":19},"name":"Matches","qualname":"::re_unicode::Matches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all non-overlapping matches for a particular string.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1374},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":473242,"byte_end":473250,"line_start":1112,"line_end":1112,"column_start":11,"column_end":19},"name":"Replacer","qualname":"::re_unicode::Replacer","value":"Replacer","parent":null,"children":[{"krate":0,"index":1375},{"krate":0,"index":1376},{"krate":0,"index":1378}],"decl_id":null,"docs":" Replacer describes types that can be used to replace matches in a string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1375},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":473557,"byte_end":473571,"line_start":1120,"line_end":1120,"column_start":8,"column_end":22},"name":"replace_append","qualname":"::re_unicode::Replacer::replace_append","value":"fn (&mut self, caps: &Captures, dst: &mut String) -> ()","parent":{"krate":0,"index":1374},"children":[],"decl_id":null,"docs":" Appends text to `dst` to replace the current match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1376},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":473976,"byte_end":473988,"line_start":1129,"line_end":1129,"column_start":8,"column_end":20},"name":"no_expansion","qualname":"::re_unicode::Replacer::no_expansion","value":"fn <'r> (&'r mut self) -> Option<Cow<'r, str>>","parent":{"krate":0,"index":1374},"children":[],"decl_id":null,"docs":" Return a fixed unchanging replacement string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1378},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":474709,"byte_end":474715,"line_start":1154,"line_end":1154,"column_start":8,"column_end":14},"name":"by_ref","qualname":"::re_unicode::Replacer::by_ref","value":"fn <'r> (&'r mut self) -> ReplacerRef<'r, Self>","parent":{"krate":0,"index":1374},"children":[],"decl_id":null,"docs":" Return a `Replacer` that borrows and wraps this `Replacer`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2531},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":474943,"byte_end":474954,"line_start":1163,"line_end":1163,"column_start":12,"column_end":23},"name":"ReplacerRef","qualname":"::re_unicode::ReplacerRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" By-reference adaptor for a `Replacer`","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1393},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":476212,"byte_end":476220,"line_start":1201,"line_end":1201,"column_start":12,"column_end":20},"name":"NoExpand","qualname":"::re_unicode::NoExpand","value":"","parent":null,"children":[],"decl_id":null,"docs":" `NoExpand` indicates literal string replacement.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2540},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/sparse.rs","byte_start":477101,"byte_end":477110,"line_start":15,"line_end":15,"column_start":12,"column_end":21},"name":"SparseSet","qualname":"::sparse::SparseSet","value":"SparseSet {  }","parent":null,"children":[{"krate":0,"index":2541},{"krate":0,"index":2542}],"decl_id":null,"docs":" A sparse set used for representing ordered NFA states.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1405},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/sparse.rs","byte_start":477489,"byte_end":477492,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"name":"new","qualname":"<SparseSet>::new","value":"fn (size: usize) -> SparseSet","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1406},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/sparse.rs","byte_start":477668,"byte_end":477671,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"len","qualname":"<SparseSet>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1407},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/sparse.rs","byte_start":477733,"byte_end":477741,"line_start":38,"line_end":38,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<SparseSet>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1408},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/sparse.rs","byte_start":477807,"byte_end":477815,"line_start":42,"line_end":42,"column_start":12,"column_end":20},"name":"capacity","qualname":"<SparseSet>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1409},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/sparse.rs","byte_start":477882,"byte_end":477888,"line_start":46,"line_end":46,"column_start":12,"column_end":18},"name":"insert","qualname":"<SparseSet>::insert","value":"fn (&mut self, value: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1410},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/sparse.rs","byte_start":478064,"byte_end":478072,"line_start":53,"line_end":53,"column_start":12,"column_end":20},"name":"contains","qualname":"<SparseSet>::contains","value":"fn (&self, value: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1411},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/sparse.rs","byte_start":478200,"byte_end":478205,"line_start":58,"line_end":58,"column_start":12,"column_end":17},"name":"clear","qualname":"<SparseSet>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1475},"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":23198,"byte_end":23206,"line_start":677,"line_end":677,"column_start":9,"column_end":17},"name":"internal","qualname":"::internal","value":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":1476},{"krate":0,"index":1477},{"krate":0,"index":1480},{"krate":0,"index":1485},{"krate":0,"index":1486}],"decl_id":null,"docs":" The `internal` module exists to support suspicious activity, such as\n testing different matching engines and supporting the `regex-debug` CLI\n utility.\n","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":23162,"byte_end":23189,"line_start":676,"line_end":676,"column_start":1,"column_end":28}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/backtrack.rs","byte_start":26165,"byte_end":26170,"line_start":70,"line_end":70,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":56}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/backtrack.rs","byte_start":26832,"byte_end":26839,"line_start":89,"line_end":89,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":44585,"byte_end":44593,"line_start":48,"line_end":48,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":131},{"krate":0,"index":133},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":71069,"byte_end":71078,"line_start":742,"line_end":742,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":73255,"byte_end":73263,"line_start":805,"line_end":805,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":74196,"byte_end":74208,"line_start":838,"line_end":838,"column_start":14,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":78962,"byte_end":78973,"line_start":969,"line_end":969,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":80215,"byte_end":80227,"line_start":1011,"line_end":1011,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":93216,"byte_end":93222,"line_start":225,"line_end":225,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":95518,"byte_end":95526,"line_start":296,"line_end":296,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":232},{"krate":0,"index":233}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":95948,"byte_end":95953,"line_start":313,"line_end":313,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":235},{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":100184,"byte_end":100189,"line_start":424,"line_end":424,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":101008,"byte_end":101018,"line_start":448,"line_end":448,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":247}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":101322,"byte_end":101325,"line_start":458,"line_end":458,"column_start":10,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":262},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":149913,"byte_end":149921,"line_start":1635,"line_end":1635,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":150715,"byte_end":150726,"line_start":1671,"line_end":1671,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":152587,"byte_end":152597,"line_start":1728,"line_end":1728,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":153033,"byte_end":153037,"line_start":1754,"line_end":1754,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":153613,"byte_end":153618,"line_start":1779,"line_end":1779,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":153889,"byte_end":153900,"line_start":1789,"line_end":1789,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":319}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":154322,"byte_end":154336,"line_start":1803,"line_end":1803,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":154842,"byte_end":154852,"line_start":1821,"line_end":1821,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/error.rs","byte_start":159972,"byte_end":159977,"line_start":31,"line_end":31,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":341},{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/error.rs","byte_start":160318,"byte_end":160323,"line_start":45,"line_end":45,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":344}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/error.rs","byte_start":160972,"byte_end":160977,"line_start":62,"line_end":62,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":166187,"byte_end":166198,"line_start":123,"line_end":123,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":412}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":175658,"byte_end":175671,"line_start":368,"line_end":368,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":421}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":176709,"byte_end":176719,"line_start":403,"line_end":403,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":186146,"byte_end":186156,"line_start":642,"line_end":642,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":436},{"krate":0,"index":442},{"krate":0,"index":444},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":449},{"krate":0,"index":451},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":466},{"krate":0,"index":467}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":201001,"byte_end":201014,"line_start":1125,"line_end":1125,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":470}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":201138,"byte_end":201142,"line_start":1131,"line_end":1131,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":472},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":202995,"byte_end":202999,"line_start":1190,"line_end":1190,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":483}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":203149,"byte_end":203161,"line_start":1199,"line_end":1199,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":485},{"krate":0,"index":487}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":208727,"byte_end":208744,"line_start":1346,"line_end":1346,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":490}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/expand.rs","byte_start":215706,"byte_end":215709,"line_start":112,"line_end":112,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/expand.rs","byte_start":215805,"byte_end":215808,"line_start":118,"line_end":118,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":514}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":224432,"byte_end":224439,"line_start":32,"line_end":32,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":227503,"byte_end":227512,"line_start":142,"line_end":142,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":564}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":227686,"byte_end":227695,"line_start":149,"line_end":149,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":567},{"krate":0,"index":568}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":227801,"byte_end":227810,"line_start":157,"line_end":157,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":571},{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":576},{"krate":0,"index":578},{"krate":0,"index":580},{"krate":0,"index":581}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":229929,"byte_end":229938,"line_start":232,"line_end":232,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":584}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":230200,"byte_end":230209,"line_start":242,"line_end":242,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":587},{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":230318,"byte_end":230327,"line_start":250,"line_end":250,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":594},{"krate":0,"index":596},{"krate":0,"index":598},{"krate":0,"index":600},{"krate":0,"index":601}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":233573,"byte_end":233577,"line_start":348,"line_end":348,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":603}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":233787,"byte_end":233791,"line_start":357,"line_end":357,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":608},{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":234746,"byte_end":234750,"line_start":388,"line_end":388,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":234832,"byte_end":234836,"line_start":392,"line_end":392,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":613}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":234959,"byte_end":234963,"line_start":398,"line_end":398,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":616}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":235192,"byte_end":235196,"line_start":408,"line_end":408,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":620}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/teddy_avx2/imp.rs","byte_start":277657,"byte_end":277662,"line_start":51,"line_end":51,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":660},{"krate":0,"index":662},{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":669}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/teddy_avx2/imp.rs","byte_start":289278,"byte_end":289283,"line_start":367,"line_end":367,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676},{"krate":0,"index":677}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/teddy_avx2/imp.rs","byte_start":292070,"byte_end":292074,"line_start":448,"line_end":448,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":679},{"krate":0,"index":680}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/teddy_ssse3/imp.rs","byte_start":309518,"byte_end":309523,"line_start":362,"line_end":362,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":698},{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":709}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/teddy_ssse3/imp.rs","byte_start":321143,"byte_end":321148,"line_start":677,"line_end":677,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":717}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/teddy_ssse3/imp.rs","byte_start":323936,"byte_end":323940,"line_start":758,"line_end":758,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":719},{"krate":0,"index":720}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":237433,"byte_end":237448,"line_start":58,"line_end":58,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":725},{"krate":0,"index":726},{"krate":0,"index":727},{"krate":0,"index":735},{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":738},{"krate":0,"index":739},{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":743}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":242580,"byte_end":242587,"line_start":200,"line_end":200,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":748}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":245657,"byte_end":245668,"line_start":280,"line_end":280,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":772},{"krate":0,"index":773}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":247383,"byte_end":247396,"line_start":343,"line_end":343,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":775},{"krate":0,"index":776},{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":779},{"krate":0,"index":780}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":251303,"byte_end":251314,"line_start":452,"line_end":452,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":782},{"krate":0,"index":785},{"krate":0,"index":786},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":789},{"krate":0,"index":790}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":256621,"byte_end":256637,"line_start":615,"line_end":615,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":793},{"krate":0,"index":794},{"krate":0,"index":796},{"krate":0,"index":797},{"krate":0,"index":803},{"krate":0,"index":804},{"krate":0,"index":806},{"krate":0,"index":807},{"krate":0,"index":808},{"krate":0,"index":809}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/pikevm.rs","byte_start":327736,"byte_end":327741,"line_start":85,"line_end":85,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":823}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/pikevm.rs","byte_start":328035,"byte_end":328038,"line_start":97,"line_end":97,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":827},{"krate":0,"index":828},{"krate":0,"index":830},{"krate":0,"index":832},{"krate":0,"index":833}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/pikevm.rs","byte_start":337238,"byte_end":337245,"line_start":358,"line_end":358,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":838}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":341061,"byte_end":341068,"line_start":77,"line_end":77,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":851},{"krate":0,"index":852},{"krate":0,"index":853},{"krate":0,"index":854},{"krate":0,"index":855},{"krate":0,"index":856},{"krate":0,"index":857}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":344022,"byte_end":344029,"line_start":161,"line_end":161,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":859},{"krate":0,"index":860}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":344170,"byte_end":344177,"line_start":170,"line_end":170,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":862}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":349084,"byte_end":349088,"line_start":289,"line_end":289,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":874}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":351479,"byte_end":351489,"line_start":371,"line_end":371,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":876},{"krate":0,"index":878}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":352901,"byte_end":352910,"line_start":418,"line_end":418,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":882}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_builder.rs","byte_start":354033,"byte_end":354045,"line_start":28,"line_end":28,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":885}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":369208,"byte_end":369213,"line_start":36,"line_end":36,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":908},{"krate":0,"index":909},{"krate":0,"index":910},{"krate":0,"index":911}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":370623,"byte_end":370628,"line_start":80,"line_end":80,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":913}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":370805,"byte_end":370810,"line_start":87,"line_end":87,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":915}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":371115,"byte_end":371120,"line_start":98,"line_end":98,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":917}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":371204,"byte_end":371209,"line_start":104,"line_end":104,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":919},{"krate":0,"index":920}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":371420,"byte_end":371425,"line_start":114,"line_end":114,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":922},{"krate":0,"index":923},{"krate":0,"index":924},{"krate":0,"index":926},{"krate":0,"index":929},{"krate":0,"index":932},{"krate":0,"index":935},{"krate":0,"index":938},{"krate":0,"index":941},{"krate":0,"index":944},{"krate":0,"index":947}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":387941,"byte_end":387946,"line_start":539,"line_end":539,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":951},{"krate":0,"index":952},{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":957},{"krate":0,"index":959},{"krate":0,"index":962}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":391984,"byte_end":391989,"line_start":657,"line_end":657,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":965},{"krate":0,"index":966},{"krate":0,"index":967},{"krate":0,"index":968},{"krate":0,"index":969}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":393501,"byte_end":393508,"line_start":699,"line_end":699,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":978},{"krate":0,"index":979}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":394095,"byte_end":394109,"line_start":717,"line_end":717,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":989},{"krate":0,"index":990}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":394684,"byte_end":394689,"line_start":738,"line_end":738,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1000},{"krate":0,"index":1001}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":395668,"byte_end":395674,"line_start":773,"line_end":773,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1010},{"krate":0,"index":1011}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":396363,"byte_end":396375,"line_start":798,"line_end":798,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1018},{"krate":0,"index":1019},{"krate":0,"index":1022}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":397803,"byte_end":397819,"line_start":837,"line_end":837,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1025},{"krate":0,"index":1026},{"krate":0,"index":1027}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":399557,"byte_end":399565,"line_start":885,"line_end":885,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1035},{"krate":0,"index":1037},{"krate":0,"index":1039},{"krate":0,"index":1041},{"krate":0,"index":1042}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":402543,"byte_end":402551,"line_start":957,"line_end":957,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1045}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":402778,"byte_end":402791,"line_start":965,"line_end":965,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1054}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":404282,"byte_end":404290,"line_start":1010,"line_end":1010,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1062},{"krate":0,"index":1063}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":404926,"byte_end":404934,"line_start":1031,"line_end":1031,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1069},{"krate":0,"index":1070}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":405718,"byte_end":405735,"line_start":1054,"line_end":1054,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1082},{"krate":0,"index":1083}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":408097,"byte_end":408108,"line_start":1123,"line_end":1123,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1095},{"krate":0,"index":1096}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":408694,"byte_end":408695,"line_start":1145,"line_end":1145,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1105}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":409350,"byte_end":409358,"line_start":1161,"line_end":1161,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1112},{"krate":0,"index":1113}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":426133,"byte_end":426142,"line_start":24,"line_end":24,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121},{"krate":0,"index":1122}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":427696,"byte_end":427714,"line_start":69,"line_end":69,"column_start":23,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1129},{"krate":0,"index":1130}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":431205,"byte_end":431212,"line_start":181,"line_end":181,"column_start":13,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1152},{"krate":0,"index":1153}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":431487,"byte_end":431494,"line_start":193,"line_end":193,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1157},{"krate":0,"index":1158}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":432716,"byte_end":432730,"line_start":228,"line_end":228,"column_start":13,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1167},{"krate":0,"index":1168}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":433015,"byte_end":433029,"line_start":240,"line_end":240,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1172},{"krate":0,"index":1173}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":435157,"byte_end":435162,"line_start":45,"line_end":45,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1196},{"krate":0,"index":1197},{"krate":0,"index":1198},{"krate":0,"index":1199}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":438261,"byte_end":438266,"line_start":139,"line_end":139,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1204}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":438443,"byte_end":438448,"line_start":146,"line_end":146,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1206}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":438636,"byte_end":438641,"line_start":154,"line_end":154,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1208}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":438725,"byte_end":438730,"line_start":160,"line_end":160,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1210},{"krate":0,"index":1211}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":438941,"byte_end":438946,"line_start":170,"line_end":170,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1213},{"krate":0,"index":1214},{"krate":0,"index":1215},{"krate":0,"index":1217},{"krate":0,"index":1220},{"krate":0,"index":1223},{"krate":0,"index":1226},{"krate":0,"index":1229},{"krate":0,"index":1232},{"krate":0,"index":1235},{"krate":0,"index":1238}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":455460,"byte_end":455465,"line_start":595,"line_end":595,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1242},{"krate":0,"index":1243},{"krate":0,"index":1244},{"krate":0,"index":1245},{"krate":0,"index":1248},{"krate":0,"index":1250},{"krate":0,"index":1253}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":459504,"byte_end":459509,"line_start":714,"line_end":714,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1256},{"krate":0,"index":1257},{"krate":0,"index":1258},{"krate":0,"index":1259},{"krate":0,"index":1260}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":460889,"byte_end":460901,"line_start":754,"line_end":754,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1267},{"krate":0,"index":1268},{"krate":0,"index":1271}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":461500,"byte_end":461505,"line_start":778,"line_end":778,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1280},{"krate":0,"index":1281}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":462477,"byte_end":462483,"line_start":813,"line_end":813,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1290},{"krate":0,"index":1291}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":463976,"byte_end":463992,"line_start":856,"line_end":856,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1294},{"krate":0,"index":1295},{"krate":0,"index":1296}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":465719,"byte_end":465727,"line_start":904,"line_end":904,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1304},{"krate":0,"index":1306},{"krate":0,"index":1308},{"krate":0,"index":1310},{"krate":0,"index":1311}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":468665,"byte_end":468673,"line_start":976,"line_end":976,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1314}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":468900,"byte_end":468913,"line_start":984,"line_end":984,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1323}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":469960,"byte_end":469968,"line_start":1014,"line_end":1014,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1328},{"krate":0,"index":1329}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":470600,"byte_end":470608,"line_start":1035,"line_end":1035,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1335},{"krate":0,"index":1336}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":471388,"byte_end":471405,"line_start":1058,"line_end":1058,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1348},{"krate":0,"index":1349}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":472011,"byte_end":472025,"line_start":1076,"line_end":1076,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1360},{"krate":0,"index":1361}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":472696,"byte_end":472703,"line_start":1097,"line_end":1097,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1371},{"krate":0,"index":1372}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":475037,"byte_end":475048,"line_start":1165,"line_end":1165,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1383},{"krate":0,"index":1384}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":475628,"byte_end":475629,"line_start":1187,"line_end":1187,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1392}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":476262,"byte_end":476270,"line_start":1203,"line_end":1203,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1399},{"krate":0,"index":1400}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/sparse.rs","byte_start":477466,"byte_end":477475,"line_start":26,"line_end":26,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1405},{"krate":0,"index":1406},{"krate":0,"index":1407},{"krate":0,"index":1408},{"krate":0,"index":1409},{"krate":0,"index":1410},{"krate":0,"index":1411}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/sparse.rs","byte_start":478271,"byte_end":478280,"line_start":63,"line_end":63,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1413},{"krate":0,"index":1414}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/vector/avx2.rs","byte_start":478782,"byte_end":478799,"line_start":9,"line_end":9,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1425},{"krate":0,"index":1426},{"krate":0,"index":1427},{"krate":0,"index":1428},{"krate":0,"index":1429},{"krate":0,"index":1430}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/vector/avx2.rs","byte_start":480498,"byte_end":480503,"line_start":64,"line_end":64,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1432},{"krate":0,"index":1433},{"krate":0,"index":1434},{"krate":0,"index":1435},{"krate":0,"index":1436},{"krate":0,"index":1437},{"krate":0,"index":1438},{"krate":0,"index":1439},{"krate":0,"index":1440},{"krate":0,"index":1441},{"krate":0,"index":1442},{"krate":0,"index":1443},{"krate":0,"index":1444},{"krate":0,"index":1445}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/vector/avx2.rs","byte_start":484286,"byte_end":484291,"line_start":182,"line_end":182,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1447}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/vector/ssse3.rs","byte_start":484929,"byte_end":484947,"line_start":17,"line_end":17,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1452},{"krate":0,"index":1453},{"krate":0,"index":1454},{"krate":0,"index":1455},{"krate":0,"index":1456},{"krate":0,"index":1457}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Inherent","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/vector/ssse3.rs","byte_start":487267,"byte_end":487272,"line_start":85,"line_end":85,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1459},{"krate":0,"index":1460},{"krate":0,"index":1461},{"krate":0,"index":1462},{"krate":0,"index":1463},{"krate":0,"index":1464},{"krate":0,"index":1465},{"krate":0,"index":1466},{"krate":0,"index":1467},{"krate":0,"index":1468},{"krate":0,"index":1469},{"krate":0,"index":1470},{"krate":0,"index":1471},{"krate":0,"index":1472}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/vector/ssse3.rs","byte_start":490046,"byte_end":490051,"line_start":187,"line_end":187,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1474}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/backtrack.rs","byte_start":26165,"byte_end":26170,"line_start":70,"line_end":70,"column_start":6,"column_end":11},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1509},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/backtrack.rs","byte_start":26832,"byte_end":26839,"line_start":89,"line_end":89,"column_start":32,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1491},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":44585,"byte_end":44593,"line_start":48,"line_end":48,"column_start":6,"column_end":14},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":110},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":71069,"byte_end":71078,"line_start":742,"line_end":742,"column_start":6,"column_end":15},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1544},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":73255,"byte_end":73263,"line_start":805,"line_end":805,"column_start":6,"column_end":14},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1563},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":74196,"byte_end":74208,"line_start":838,"line_end":838,"column_start":14,"column_end":26},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":171},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":78962,"byte_end":78973,"line_start":969,"line_end":969,"column_start":6,"column_end":17},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":184},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":80215,"byte_end":80227,"line_start":1011,"line_end":1011,"column_start":6,"column_end":18},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":193},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":93216,"byte_end":93222,"line_start":225,"line_end":225,"column_start":9,"column_end":15},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1649},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":95518,"byte_end":95526,"line_start":296,"line_end":296,"column_start":23,"column_end":31},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":226},"to":{"krate":2,"index":3496}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":95948,"byte_end":95953,"line_start":313,"line_end":313,"column_start":6,"column_end":11},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1665},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":100184,"byte_end":100189,"line_start":424,"line_end":424,"column_start":6,"column_end":11},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1616},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":101008,"byte_end":101018,"line_start":448,"line_end":448,"column_start":6,"column_end":16},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1622},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":101322,"byte_end":101325,"line_start":458,"line_end":458,"column_start":10,"column_end":13},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1637},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":149913,"byte_end":149921,"line_start":1635,"line_end":1635,"column_start":6,"column_end":14},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1723},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":150715,"byte_end":150726,"line_start":1671,"line_end":1671,"column_start":6,"column_end":17},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1632},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":152587,"byte_end":152597,"line_start":1728,"line_end":1728,"column_start":6,"column_end":16},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1707},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":153033,"byte_end":153037,"line_start":1754,"line_end":1754,"column_start":6,"column_end":10},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1677},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":153613,"byte_end":153618,"line_start":1779,"line_end":1779,"column_start":21,"column_end":26},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1665},"to":{"krate":2,"index":7185}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":153889,"byte_end":153900,"line_start":1789,"line_end":1789,"column_start":21,"column_end":32},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1632},"to":{"krate":2,"index":7185}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":154322,"byte_end":154336,"line_start":1803,"line_end":1803,"column_start":25,"column_end":39},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":320},"to":{"krate":2,"index":7185}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":154842,"byte_end":154852,"line_start":1821,"line_end":1821,"column_start":21,"column_end":31},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1707},"to":{"krate":2,"index":7185}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/error.rs","byte_start":159972,"byte_end":159977,"line_start":31,"line_end":31,"column_start":30,"column_end":35},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1729},"to":{"krate":1,"index":1559}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/error.rs","byte_start":160318,"byte_end":160323,"line_start":45,"line_end":45,"column_start":23,"column_end":28},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1729},"to":{"krate":2,"index":7190}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/error.rs","byte_start":160972,"byte_end":160977,"line_start":62,"line_end":62,"column_start":21,"column_end":26},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1729},"to":{"krate":2,"index":7185}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":166187,"byte_end":166198,"line_start":123,"line_end":123,"column_start":6,"column_end":17},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":385},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":175658,"byte_end":175671,"line_start":368,"line_end":368,"column_start":32,"column_end":45},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":381},"to":{"krate":0,"index":1131}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":176709,"byte_end":176719,"line_start":403,"line_end":403,"column_start":32,"column_end":42},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1743},"to":{"krate":0,"index":1131}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":186146,"byte_end":186156,"line_start":642,"line_end":642,"column_start":10,"column_end":20},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1743},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":201001,"byte_end":201014,"line_start":1125,"line_end":1125,"column_start":10,"column_end":23},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":381},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":201138,"byte_end":201142,"line_start":1131,"line_end":1131,"column_start":6,"column_end":10},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":378},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":202995,"byte_end":202999,"line_start":1190,"line_end":1190,"column_start":16,"column_end":20},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":378},"to":{"krate":2,"index":2164}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":203149,"byte_end":203161,"line_start":1199,"line_end":1199,"column_start":6,"column_end":18},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1750},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":208727,"byte_end":208744,"line_start":1346,"line_end":1346,"column_start":6,"column_end":23},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1808},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/expand.rs","byte_start":215706,"byte_end":215709,"line_start":112,"line_end":112,"column_start":28,"column_end":31},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1834},"to":{"krate":2,"index":2206}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/expand.rs","byte_start":215805,"byte_end":215808,"line_start":118,"line_end":118,"column_start":22,"column_end":25},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1834},"to":{"krate":2,"index":2206}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":224432,"byte_end":224439,"line_start":32,"line_end":32,"column_start":6,"column_end":13},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1857},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":227503,"byte_end":227512,"line_start":142,"line_end":142,"column_start":10,"column_end":19},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1867},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":227686,"byte_end":227695,"line_start":149,"line_end":149,"column_start":25,"column_end":34},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1867},"to":{"krate":2,"index":1704}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":227801,"byte_end":227810,"line_start":157,"line_end":157,"column_start":20,"column_end":29},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1867},"to":{"krate":0,"index":543}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":229929,"byte_end":229938,"line_start":232,"line_end":232,"column_start":10,"column_end":19},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1879},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":230200,"byte_end":230209,"line_start":242,"line_end":242,"column_start":25,"column_end":34},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1879},"to":{"krate":2,"index":1704}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":230318,"byte_end":230327,"line_start":250,"line_end":250,"column_start":20,"column_end":29},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1879},"to":{"krate":0,"index":543}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":233573,"byte_end":233577,"line_start":348,"line_end":348,"column_start":21,"column_end":25},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1891},"to":{"krate":2,"index":7185}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":233787,"byte_end":233791,"line_start":357,"line_end":357,"column_start":6,"column_end":10},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1891},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":234746,"byte_end":234750,"line_start":388,"line_end":388,"column_start":21,"column_end":25},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1891},"to":{"krate":2,"index":2206}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":234832,"byte_end":234836,"line_start":392,"line_end":392,"column_start":29,"column_end":33},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1891},"to":{"krate":2,"index":2206}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":234959,"byte_end":234963,"line_start":398,"line_end":398,"column_start":26,"column_end":30},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1891},"to":{"krate":2,"index":2040}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":235192,"byte_end":235196,"line_start":408,"line_end":408,"column_start":27,"column_end":31},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1891},"to":{"krate":2,"index":2077}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/teddy_avx2/imp.rs","byte_start":277657,"byte_end":277662,"line_start":51,"line_end":51,"column_start":6,"column_end":11},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1921},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/teddy_avx2/imp.rs","byte_start":289278,"byte_end":289283,"line_start":367,"line_end":367,"column_start":6,"column_end":11},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1931},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/teddy_avx2/imp.rs","byte_start":292070,"byte_end":292074,"line_start":448,"line_end":448,"column_start":6,"column_end":10},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1940},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/teddy_ssse3/imp.rs","byte_start":309518,"byte_end":309523,"line_start":362,"line_end":362,"column_start":6,"column_end":11},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1956},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/teddy_ssse3/imp.rs","byte_start":321143,"byte_end":321148,"line_start":677,"line_end":677,"column_start":6,"column_end":11},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1966},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/teddy_ssse3/imp.rs","byte_start":323936,"byte_end":323940,"line_start":758,"line_end":758,"column_start":6,"column_end":10},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1975},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":237433,"byte_end":237448,"line_start":58,"line_end":58,"column_start":6,"column_end":21},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1983},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":242580,"byte_end":242587,"line_start":200,"line_end":200,"column_start":6,"column_end":13},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1992},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":245657,"byte_end":245668,"line_start":280,"line_end":280,"column_start":23,"column_end":34},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":751},"to":{"krate":2,"index":3496}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":247383,"byte_end":247396,"line_start":343,"line_end":343,"column_start":6,"column_end":19},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":2017},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":251303,"byte_end":251314,"line_start":452,"line_end":452,"column_start":6,"column_end":17},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":2026},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":256621,"byte_end":256637,"line_start":615,"line_end":615,"column_start":6,"column_end":22},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":2037},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/pikevm.rs","byte_start":327736,"byte_end":327741,"line_start":85,"line_end":85,"column_start":6,"column_end":11},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":2057},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/pikevm.rs","byte_start":328035,"byte_end":328038,"line_start":97,"line_end":97,"column_start":20,"column_end":23},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":2047},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/pikevm.rs","byte_start":337238,"byte_end":337245,"line_start":358,"line_end":358,"column_start":6,"column_end":13},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":2065},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":341061,"byte_end":341068,"line_start":77,"line_end":77,"column_start":6,"column_end":13},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":2084},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":344022,"byte_end":344029,"line_start":161,"line_end":161,"column_start":16,"column_end":23},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":2084},"to":{"krate":2,"index":1704}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":344170,"byte_end":344177,"line_start":170,"line_end":170,"column_start":21,"column_end":28},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":2084},"to":{"krate":2,"index":7185}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":349084,"byte_end":349088,"line_start":289,"line_end":289,"column_start":6,"column_end":10},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":2102},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":351479,"byte_end":351489,"line_start":371,"line_end":371,"column_start":6,"column_end":16},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":2182},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":352901,"byte_end":352910,"line_start":418,"line_end":418,"column_start":6,"column_end":15},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":2189},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_builder.rs","byte_start":354033,"byte_end":354045,"line_start":28,"line_end":28,"column_start":18,"column_end":30},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":2197},"to":{"krate":2,"index":2189}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":369208,"byte_end":369213,"line_start":36,"line_end":36,"column_start":10,"column_end":15},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":2301},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":370623,"byte_end":370628,"line_start":80,"line_end":80,"column_start":23,"column_end":28},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":2321},"to":{"krate":2,"index":7190}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":370805,"byte_end":370810,"line_start":87,"line_end":87,"column_start":21,"column_end":26},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":2321},"to":{"krate":2,"index":7185}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":371115,"byte_end":371120,"line_start":98,"line_end":98,"column_start":21,"column_end":26},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":2321},"to":{"krate":2,"index":2206}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":371204,"byte_end":371209,"line_start":104,"line_end":104,"column_start":18,"column_end":23},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":2321},"to":{"krate":2,"index":6363}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":371420,"byte_end":371425,"line_start":114,"line_end":114,"column_start":6,"column_end":11},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":2321},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":387941,"byte_end":387946,"line_start":539,"line_end":539,"column_start":6,"column_end":11},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":2321},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":391984,"byte_end":391989,"line_start":657,"line_end":657,"column_start":6,"column_end":11},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":2321},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":393501,"byte_end":393508,"line_start":699,"line_end":699,"column_start":27,"column_end":34},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":970},"to":{"krate":2,"index":3496}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":394095,"byte_end":394109,"line_start":717,"line_end":717,"column_start":27,"column_end":41},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":981},"to":{"krate":2,"index":3496}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":394684,"byte_end":394689,"line_start":738,"line_end":738,"column_start":27,"column_end":32},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":992},"to":{"krate":2,"index":3496}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":395668,"byte_end":395674,"line_start":773,"line_end":773,"column_start":27,"column_end":33},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1002},"to":{"krate":2,"index":3496}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":396363,"byte_end":396375,"line_start":798,"line_end":798,"column_start":23,"column_end":35},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1012},"to":{"krate":2,"index":3496}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":397803,"byte_end":397819,"line_start":837,"line_end":837,"column_start":6,"column_end":22},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":2326},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":399557,"byte_end":399565,"line_start":885,"line_end":885,"column_start":10,"column_end":18},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1028},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":402543,"byte_end":402551,"line_start":957,"line_end":957,"column_start":25,"column_end":33},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1028},"to":{"krate":2,"index":7185}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":402778,"byte_end":402791,"line_start":965,"line_end":965,"column_start":29,"column_end":42},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1046},"to":{"krate":2,"index":7185}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":404282,"byte_end":404290,"line_start":1010,"line_end":1010,"column_start":27,"column_end":35},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1028},"to":{"krate":2,"index":1780}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":404926,"byte_end":404934,"line_start":1031,"line_end":1031,"column_start":33,"column_end":41},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1028},"to":{"krate":2,"index":1780}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":405718,"byte_end":405735,"line_start":1054,"line_end":1054,"column_start":27,"column_end":44},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1074},"to":{"krate":2,"index":3496}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":408097,"byte_end":408108,"line_start":1123,"line_end":1123,"column_start":50,"column_end":61},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":2333},"to":{"krate":0,"index":1086}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":408694,"byte_end":408695,"line_start":1145,"line_end":1145,"column_start":25,"column_end":26},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1103},"to":{"krate":0,"index":1086}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":409350,"byte_end":409358,"line_start":1161,"line_end":1161,"column_start":23,"column_end":31},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1106},"to":{"krate":0,"index":1086}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":426133,"byte_end":426142,"line_start":24,"line_end":24,"column_start":6,"column_end":15},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":2492},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":427696,"byte_end":427714,"line_start":69,"line_end":69,"column_start":23,"column_end":41},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1123},"to":{"krate":2,"index":3496}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":428845,"byte_end":428850,"line_start":99,"line_end":99,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":1540},"to":{"krate":0,"index":1131}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":431205,"byte_end":431212,"line_start":181,"line_end":181,"column_start":13,"column_end":20},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1142},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":431487,"byte_end":431494,"line_start":193,"line_end":193,"column_start":26,"column_end":33},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1142},"to":{"krate":2,"index":3496}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":432716,"byte_end":432730,"line_start":228,"line_end":228,"column_start":13,"column_end":27},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1159},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":433015,"byte_end":433029,"line_start":240,"line_end":240,"column_start":26,"column_end":40},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1159},"to":{"krate":2,"index":3496}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":435157,"byte_end":435162,"line_start":45,"line_end":45,"column_start":10,"column_end":15},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":2499},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":438261,"byte_end":438266,"line_start":139,"line_end":139,"column_start":23,"column_end":28},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":2519},"to":{"krate":2,"index":7190}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":438443,"byte_end":438448,"line_start":146,"line_end":146,"column_start":21,"column_end":26},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":2519},"to":{"krate":2,"index":7185}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":438636,"byte_end":438641,"line_start":154,"line_end":154,"column_start":21,"column_end":26},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":2519},"to":{"krate":2,"index":2206}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":438725,"byte_end":438730,"line_start":160,"line_end":160,"column_start":18,"column_end":23},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":2519},"to":{"krate":2,"index":6363}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":438941,"byte_end":438946,"line_start":170,"line_end":170,"column_start":6,"column_end":11},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":2519},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":455460,"byte_end":455465,"line_start":595,"line_end":595,"column_start":6,"column_end":11},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2519},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":459504,"byte_end":459509,"line_start":714,"line_end":714,"column_start":6,"column_end":11},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":2519},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":460889,"byte_end":460901,"line_start":754,"line_end":754,"column_start":23,"column_end":35},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1261},"to":{"krate":2,"index":3496}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":461500,"byte_end":461505,"line_start":778,"line_end":778,"column_start":27,"column_end":32},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1272},"to":{"krate":2,"index":3496}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":462477,"byte_end":462483,"line_start":813,"line_end":813,"column_start":27,"column_end":33},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1282},"to":{"krate":2,"index":3496}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":463976,"byte_end":463992,"line_start":856,"line_end":856,"column_start":6,"column_end":22},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":2524},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":465719,"byte_end":465727,"line_start":904,"line_end":904,"column_start":10,"column_end":18},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1297},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":468665,"byte_end":468673,"line_start":976,"line_end":976,"column_start":25,"column_end":33},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1297},"to":{"krate":2,"index":7185}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":468900,"byte_end":468913,"line_start":984,"line_end":984,"column_start":29,"column_end":42},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1315},"to":{"krate":2,"index":7185}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":469960,"byte_end":469968,"line_start":1014,"line_end":1014,"column_start":27,"column_end":35},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1297},"to":{"krate":2,"index":1780}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":470600,"byte_end":470608,"line_start":1035,"line_end":1035,"column_start":33,"column_end":41},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1297},"to":{"krate":2,"index":1780}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":471388,"byte_end":471405,"line_start":1058,"line_end":1058,"column_start":27,"column_end":44},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1340},"to":{"krate":2,"index":3496}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":472011,"byte_end":472025,"line_start":1076,"line_end":1076,"column_start":27,"column_end":41},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1352},"to":{"krate":2,"index":3496}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":472696,"byte_end":472703,"line_start":1097,"line_end":1097,"column_start":27,"column_end":34},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1363},"to":{"krate":2,"index":3496}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":475037,"byte_end":475048,"line_start":1165,"line_end":1165,"column_start":50,"column_end":61},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":2531},"to":{"krate":0,"index":1374}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":475628,"byte_end":475629,"line_start":1187,"line_end":1187,"column_start":25,"column_end":26},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1390},"to":{"krate":0,"index":1374}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":476262,"byte_end":476270,"line_start":1203,"line_end":1203,"column_start":23,"column_end":31},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1393},"to":{"krate":0,"index":1374}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/sparse.rs","byte_start":477466,"byte_end":477475,"line_start":26,"line_end":26,"column_start":6,"column_end":15},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":2540},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/sparse.rs","byte_start":478271,"byte_end":478280,"line_start":63,"line_end":63,"column_start":16,"column_end":25},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2540},"to":{"krate":2,"index":1704}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/vector/avx2.rs","byte_start":478782,"byte_end":478799,"line_start":9,"line_end":9,"column_start":6,"column_end":23},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":2547},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/vector/avx2.rs","byte_start":480498,"byte_end":480503,"line_start":64,"line_end":64,"column_start":6,"column_end":11},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":2555},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/vector/avx2.rs","byte_start":484286,"byte_end":484291,"line_start":182,"line_end":182,"column_start":21,"column_end":26},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":2555},"to":{"krate":2,"index":7185}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/vector/ssse3.rs","byte_start":484929,"byte_end":484947,"line_start":17,"line_end":17,"column_start":6,"column_end":24},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":2562},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/vector/ssse3.rs","byte_start":487267,"byte_end":487272,"line_start":85,"line_end":85,"column_start":6,"column_end":11},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":2570},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zyphen/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/vector/ssse3.rs","byte_start":490046,"byte_end":490051,"line_start":187,"line_end":187,"column_start":21,"column_end":26},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":2570},"to":{"krate":2,"index":7185}}]}